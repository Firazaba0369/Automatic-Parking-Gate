
P3 - Final Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080032c8  080032c8  000042c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c4  080033c4  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033cc  080033cc  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033cc  080033cc  000043cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033d0  080033d0  000043d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080033d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000060  08003434  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003434  000051e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c00  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fa  00000000  00000000  0000bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000589  00000000  00000000  0000dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d8f  00000000  00000000  0000e291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000927a  00000000  00000000  00033020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e117b  00000000  00000000  0003c29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  0011d458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011f4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032b0 	.word	0x080032b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080032b0 	.word	0x080032b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <UART_print>:
 *      Author: firaz
 */
#include "main.h"
#include "UART.h"

void UART_print(char *out_str){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	//check string
	if(out_str == NULL){
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d013      	beq.n	80002a6 <UART_print+0x36>
		return;
	}
	//check character isn't null terminator
	while(*out_str != '\0'){
 800027e:	e00d      	b.n	800029c <UART_print+0x2c>
		//wait for transmission flag
		while(!(USART2->ISR & USART_ISR_TXE));
 8000280:	bf00      	nop
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <UART_print+0x44>)
 8000284:	69db      	ldr	r3, [r3, #28]
 8000286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <UART_print+0x12>
		USART2->TDR = *out_str; //write string to USART
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	781a      	ldrb	r2, [r3, #0]
 8000292:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <UART_print+0x44>)
 8000294:	851a      	strh	r2, [r3, #40]	@ 0x28
		out_str++; //increment string pointer
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
	while(*out_str != '\0'){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d1ed      	bne.n	8000280 <UART_print+0x10>
 80002a4:	e000      	b.n	80002a8 <UART_print+0x38>
		return;
 80002a6:	bf00      	nop
	}
}
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40004400 	.word	0x40004400

080002b8 <UART_init>:

void UART_init(void){
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA and USART
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002bc:	4b3b      	ldr	r3, [pc, #236]	@ (80003ac <UART_init+0xf4>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c0:	4a3a      	ldr	r2, [pc, #232]	@ (80003ac <UART_init+0xf4>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80002c8:	4b38      	ldr	r3, [pc, #224]	@ (80003ac <UART_init+0xf4>)
 80002ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002cc:	4a37      	ldr	r2, [pc, #220]	@ (80003ac <UART_init+0xf4>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d2:	6593      	str	r3, [r2, #88]	@ 0x58

	//Set GPIOA2 & GPIOA3 to alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 80002e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002f2:	6013      	str	r3, [r2, #0]

	//Enable alternate functionality
	GPIOA-> AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);
 80002f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f8:	6a1b      	ldr	r3, [r3, #32]
 80002fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000302:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] |= ((0x7UL << GPIO_AFRL_AFSEL2_Pos) | (0x7UL << GPIO_AFRL_AFSEL3_Pos));
 8000304:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000308:	6a1b      	ldr	r3, [r3, #32]
 800030a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800030e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000312:	6213      	str	r3, [r2, #32]

	//Set no PUPD
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031e:	f023 030c 	bic.w	r3, r3, #12
 8000322:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
 8000324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000332:	60d3      	str	r3, [r2, #12]

	//Set GPIOA speed to high
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
 8000334:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000342:	6093      	str	r3, [r2, #8]

	//USART setup
	//Disable UE to set M0, M1, BRR, STOP,
	USART2->CR1 &= ~(USART_CR1_UE);
 8000344:	4b1a      	ldr	r3, [pc, #104]	@ (80003b0 <UART_init+0xf8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a19      	ldr	r2, [pc, #100]	@ (80003b0 <UART_init+0xf8>)
 800034a:	f023 0301 	bic.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
	//Set M0, M1 for 8 bit word
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);
 8000350:	4b17      	ldr	r3, [pc, #92]	@ (80003b0 <UART_init+0xf8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a16      	ldr	r2, [pc, #88]	@ (80003b0 <UART_init+0xf8>)
 8000356:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800035a:	6013      	str	r3, [r2, #0]
	//Set stop bit to 1 bit
	USART2->CR2 &= ~(USART_CR2_STOP);
 800035c:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <UART_init+0xf8>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a13      	ldr	r2, [pc, #76]	@ (80003b0 <UART_init+0xf8>)
 8000362:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000366:	6053      	str	r3, [r2, #4]
	//BRR set baud rate 40MHz/115.2Kbps
	USART2->BRR = (CLOCK_SPEED/BAUD_RATE);
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <UART_init+0xf8>)
 800036a:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800036e:	60da      	str	r2, [r3, #12]
	//RE - receiver enable
	USART2->CR1 |= (USART_CR1_RE);
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <UART_init+0xf8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	@ (80003b0 <UART_init+0xf8>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	6013      	str	r3, [r2, #0]
	//Set oversampling mode
	USART2->CR1 &= ~(USART_CR1_OVER8);
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <UART_init+0xf8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a0b      	ldr	r2, [pc, #44]	@ (80003b0 <UART_init+0xf8>)
 8000382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000386:	6013      	str	r3, [r2, #0]
	//UE - USART enable
	USART2->CR1 |= (USART_CR1_UE);
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <UART_init+0xf8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <UART_init+0xf8>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]
	//TE - transmit enable  RE - Receive enable
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <UART_init+0xf8>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <UART_init+0xf8>)
 800039a:	f043 030c 	orr.w	r3, r3, #12
 800039e:	6013      	str	r3, [r2, #0]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40004400 	.word	0x40004400

080003b4 <keypad_init>:

/**
  * @brief: function to initialize keypad ports and set columns to 1
  * @retval: None
  */
void keypad_init(void){
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
	  //set clock for GPIOA, GPIOB, and GPIOC
	  RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN);
 80003b8:	4b20      	ldr	r3, [pc, #128]	@ (800043c <keypad_init+0x88>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	4a1f      	ldr	r2, [pc, #124]	@ (800043c <keypad_init+0x88>)
 80003be:	f043 0306 	orr.w	r3, r3, #6
 80003c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  /*------------------- Configure PB4-PB6 for GPIOB column input -------------------*/
	  //setup MODER for columns input
	  GPIOB->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6);
 80003c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <keypad_init+0x8c>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000440 <keypad_init+0x8c>)
 80003ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80003ce:	6013      	str	r3, [r2, #0]
	  //setup pull down resistor to avoid floating
	  GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4 |GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6);
 80003d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <keypad_init+0x8c>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000440 <keypad_init+0x8c>)
 80003d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80003da:	60d3      	str	r3, [r2, #12]
	  GPIOB->PUPDR |= (GPIO_PUPDR_PUPD4_1 |GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1);
 80003dc:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <keypad_init+0x8c>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a17      	ldr	r2, [pc, #92]	@ (8000440 <keypad_init+0x8c>)
 80003e2:	f443 5328 	orr.w	r3, r3, #10752	@ 0x2a00
 80003e6:	60d3      	str	r3, [r2, #12]

	  /*------------------- Configure PC0-PC3 for GPIOC row output -------------------*/
	  //setup MODER for row output
	  GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80003e8:	4b16      	ldr	r3, [pc, #88]	@ (8000444 <keypad_init+0x90>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <keypad_init+0x90>)
 80003ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80003f2:	6013      	str	r3, [r2, #0]
	  GPIOC->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
 80003f4:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <keypad_init+0x90>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a12      	ldr	r2, [pc, #72]	@ (8000444 <keypad_init+0x90>)
 80003fa:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80003fe:	6013      	str	r3, [r2, #0]
	  //set push pull output type
	  GPIOC->OTYPER  &=  ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 | GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
 8000400:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <keypad_init+0x90>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a0f      	ldr	r2, [pc, #60]	@ (8000444 <keypad_init+0x90>)
 8000406:	f023 030f 	bic.w	r3, r3, #15
 800040a:	6053      	str	r3, [r2, #4]
	  //no PUPD
	  GPIOC->PUPDR |= (GPIO_PUPDR_PUPD0_1 |GPIO_PUPDR_PUPD1_1 | GPIO_PUPDR_PUPD2_1 | GPIO_PUPDR_PUPD3_1);
 800040c:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <keypad_init+0x90>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <keypad_init+0x90>)
 8000412:	f043 03aa 	orr.w	r3, r3, #170	@ 0xaa
 8000416:	60d3      	str	r3, [r2, #12]
	  //set to high speed
	  GPIOC->OSPEEDR |= (GPIO_OSPEEDR_OSPEED0_Msk | GPIO_OSPEEDR_OSPEED1_Msk
 8000418:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <keypad_init+0x90>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a09      	ldr	r2, [pc, #36]	@ (8000444 <keypad_init+0x90>)
 800041e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000422:	6093      	str	r3, [r2, #8]
			  | GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);

	  /*------------------- Initialize rows-------------------*/
	  //set rows to 1
	  GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 8000424:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <keypad_init+0x90>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a06      	ldr	r2, [pc, #24]	@ (8000444 <keypad_init+0x90>)
 800042a:	f043 030f 	orr.w	r3, r3, #15
 800042e:	6153      	str	r3, [r2, #20]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	48000400 	.word	0x48000400
 8000444:	48000800 	.word	0x48000800

08000448 <calculate_key>:

/**
  * @brief Helper function to calculate the key for keypad_func
  * @retval int8_t
  */
int8_t calculate_key(int8_t row,int8_t col){
 8000448:	b480      	push	{r7}
 800044a:	b087      	sub	sp, #28
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	460a      	mov	r2, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
	//2D array to represent keypad
	int8_t keypad[NUM_OF_ROWS][NUM_OF_COLS] = {
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <calculate_key+0x44>)
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	    {1, 2, 3},
	    {4, 5, 6},
	    {7, 8, 9},
	    {ASTERISK, 0, POUND}
	};
		return keypad[row][col];  // Return the character for the pressed key
 8000464:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000468:	f997 1006 	ldrsb.w	r1, [r7, #6]
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	3318      	adds	r3, #24
 8000474:	443b      	add	r3, r7
 8000476:	440b      	add	r3, r1
 8000478:	3b0c      	subs	r3, #12
 800047a:	f993 3000 	ldrsb.w	r3, [r3]
}
 800047e:	4618      	mov	r0, r3
 8000480:	371c      	adds	r7, #28
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	080032c8 	.word	0x080032c8

08000490 <keypad_func>:

/**
  * @brief: function to check for key-press and return key value if pressed
  * @retval: int8_t
  */
int8_t keypad_func(void){
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
	int8_t pressed_row = NO_PRESS;
 8000496:	23ff      	movs	r3, #255	@ 0xff
 8000498:	73fb      	strb	r3, [r7, #15]
    int8_t pressed_col = NO_PRESS;
 800049a:	23ff      	movs	r3, #255	@ 0xff
 800049c:	73bb      	strb	r3, [r7, #14]
    int16_t idr_value = GPIOB->IDR;
 800049e:	4b3e      	ldr	r3, [pc, #248]	@ (8000598 <keypad_func+0x108>)
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	80fb      	strh	r3, [r7, #6]
    //read cols
    idr_value &= (GPIO_IDR_ID4  | GPIO_IDR_ID5 | GPIO_IDR_ID6);
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80004aa:	80fb      	strh	r3, [r7, #6]
    if(!((idr_value == 0b10000) || (idr_value == 0b100000) || (idr_value == 0b1000000))){
 80004ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d010      	beq.n	80004d6 <keypad_func+0x46>
 80004b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b8:	2b20      	cmp	r3, #32
 80004ba:	d00c      	beq.n	80004d6 <keypad_func+0x46>
 80004bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c0:	2b40      	cmp	r3, #64	@ 0x40
 80004c2:	d008      	beq.n	80004d6 <keypad_func+0x46>
    	//set rows back to zero for next press
    	GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 80004c4:	4b35      	ldr	r3, [pc, #212]	@ (800059c <keypad_func+0x10c>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	4a34      	ldr	r2, [pc, #208]	@ (800059c <keypad_func+0x10c>)
 80004ca:	f043 030f 	orr.w	r3, r3, #15
 80004ce:	6153      	str	r3, [r2, #20]
    	return NO_PRESS;
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295
 80004d4:	e05b      	b.n	800058e <keypad_func+0xfe>
    }
    //cycle through rows to determine key-press
    for(int row = 0; row < NUM_OF_ROWS; row++){
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	e033      	b.n	8000544 <keypad_func+0xb4>
        GPIOC->ODR &= ~(GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 80004dc:	4b2f      	ldr	r3, [pc, #188]	@ (800059c <keypad_func+0x10c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a2e      	ldr	r2, [pc, #184]	@ (800059c <keypad_func+0x10c>)
 80004e2:	f023 030f 	bic.w	r3, r3, #15
 80004e6:	6153      	str	r3, [r2, #20]
        GPIOC->ODR |= (1<<row);
 80004e8:	4b2c      	ldr	r3, [pc, #176]	@ (800059c <keypad_func+0x10c>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	2101      	movs	r1, #1
 80004ee:	68ba      	ldr	r2, [r7, #8]
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a29      	ldr	r2, [pc, #164]	@ (800059c <keypad_func+0x10c>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6153      	str	r3, [r2, #20]
        idr_value = GPIOB->IDR;
 80004fc:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <keypad_func+0x108>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	80fb      	strh	r3, [r7, #6]
        //checks to see if we get correct idr, stores row, and associated col based on col idr
        if(idr_value & GPIO_IDR_ID4 ){ //check column 0
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	2b00      	cmp	r3, #0
 800050a:	d004      	beq.n	8000516 <keypad_func+0x86>
            pressed_col = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	73bb      	strb	r3, [r7, #14]
            pressed_row = row;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	73fb      	strb	r3, [r7, #15]
            break;
 8000514:	e019      	b.n	800054a <keypad_func+0xba>
        }
        if(idr_value & GPIO_IDR_ID5 ){ //check column 1
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	2b00      	cmp	r3, #0
 800051e:	d004      	beq.n	800052a <keypad_func+0x9a>
            pressed_col = 1;
 8000520:	2301      	movs	r3, #1
 8000522:	73bb      	strb	r3, [r7, #14]
            pressed_row = row;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	73fb      	strb	r3, [r7, #15]
            break;
 8000528:	e00f      	b.n	800054a <keypad_func+0xba>
        }
        if(idr_value & GPIO_IDR_ID6){ //check column 3
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000530:	2b00      	cmp	r3, #0
 8000532:	d004      	beq.n	800053e <keypad_func+0xae>
            pressed_col = 2;
 8000534:	2302      	movs	r3, #2
 8000536:	73bb      	strb	r3, [r7, #14]
            pressed_row = row;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	73fb      	strb	r3, [r7, #15]
            break;
 800053c:	e005      	b.n	800054a <keypad_func+0xba>
    for(int row = 0; row < NUM_OF_ROWS; row++){
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	3301      	adds	r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	2b03      	cmp	r3, #3
 8000548:	ddc8      	ble.n	80004dc <keypad_func+0x4c>
        }
    }
    if(pressed_row == NO_PRESS || pressed_col == NO_PRESS){
 800054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800054e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000552:	d004      	beq.n	800055e <keypad_func+0xce>
 8000554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800055c:	d108      	bne.n	8000570 <keypad_func+0xe0>
    	//set rows back to zero for next press
    	GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <keypad_func+0x10c>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <keypad_func+0x10c>)
 8000564:	f043 030f 	orr.w	r3, r3, #15
 8000568:	6153      	str	r3, [r2, #20]
    	return NO_PRESS;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e00e      	b.n	800058e <keypad_func+0xfe>
    }
    else{
    	//set rows back to zero for next press
    	GPIOC->ODR |= (GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD2 | GPIO_ODR_OD3);
 8000570:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <keypad_func+0x10c>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	4a09      	ldr	r2, [pc, #36]	@ (800059c <keypad_func+0x10c>)
 8000576:	f043 030f 	orr.w	r3, r3, #15
 800057a:	6153      	str	r3, [r2, #20]
    	return calculate_key(pressed_row, pressed_col);
 800057c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000584:	4611      	mov	r1, r2
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff5e 	bl	8000448 <calculate_key>
 800058c:	4603      	mov	r3, r0
    }

}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	48000400 	.word	0x48000400
 800059c:	48000800 	.word	0x48000800

080005a0 <main>:
uint8_t sample = FIRST_SAMPLE;
uint32_t time_one = 0;
uint32_t time_two = 0;

int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08c      	sub	sp, #48	@ 0x30
 80005a4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80005a6:	f000 fd48 	bl	800103a <HAL_Init>
  SystemClock_Config();
 80005aa:	f000 fb23 	bl	8000bf4 <SystemClock_Config>

  //initialize peripherals
  TIM2_init();
 80005ae:	f000 fc7f 	bl	8000eb0 <TIM2_init>
  TIM3_init();
 80005b2:	f000 fcd1 	bl	8000f58 <TIM3_init>
  UART_init();
 80005b6:	f7ff fe7f 	bl	80002b8 <UART_init>
  sensor_init();
 80005ba:	f000 f9d7 	bl	800096c <sensor_init>
  motor_init();
 80005be:	f000 fa29 	bl	8000a14 <motor_init>
  keypad_init();
 80005c2:	f7ff fef7 	bl	80003b4 <keypad_init>
  LED_init();
 80005c6:	f000 f999 	bl	80008fc <LED_init>
  MX_RNG_Init();
 80005ca:	f000 fb59 	bl	8000c80 <MX_RNG_Init>

  //local vars
  uint8_t down_flag = NO_FLAG;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t passcode;

  while (1)
  {
		if(update_passcode && !detection_flag){
 80005d4:	4b6d      	ldr	r3, [pc, #436]	@ (800078c <main+0x1ec>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d02e      	beq.n	800063a <main+0x9a>
 80005dc:	4b6c      	ldr	r3, [pc, #432]	@ (8000790 <main+0x1f0>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d12a      	bne.n	800063a <main+0x9a>

			//check flags before reading RNG data
			while(!(RNG->SR & RNG_SR_DRDY));
 80005e4:	bf00      	nop
 80005e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000794 <main+0x1f4>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d0f9      	beq.n	80005e6 <main+0x46>

			// Read random data and limit it to a four-digit passcode
			uint32_t raw_random_number = RNG->DR;
 80005f2:	4b68      	ldr	r3, [pc, #416]	@ (8000794 <main+0x1f4>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	60fb      	str	r3, [r7, #12]
			passcode = raw_random_number % FOUR_DIG_LIMITER;
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4a67      	ldr	r2, [pc, #412]	@ (8000798 <main+0x1f8>)
 80005fc:	fba2 1203 	umull	r1, r2, r2, r3
 8000600:	0b52      	lsrs	r2, r2, #13
 8000602:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000606:	fb01 f202 	mul.w	r2, r1, r2
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
			char passcode_str[6];

			//reset screen and cursor
			UART_print("\x1B[2J");
 800060e:	4863      	ldr	r0, [pc, #396]	@ (800079c <main+0x1fc>)
 8000610:	f7ff fe2e 	bl	8000270 <UART_print>
			UART_print("\x1B[H");
 8000614:	4862      	ldr	r0, [pc, #392]	@ (80007a0 <main+0x200>)
 8000616:	f7ff fe2b 	bl	8000270 <UART_print>

			//print RNG passcode
			UART_print("Passcode: ");
 800061a:	4862      	ldr	r0, [pc, #392]	@ (80007a4 <main+0x204>)
 800061c:	f7ff fe28 	bl	8000270 <UART_print>
			sprintf(passcode_str, "%04u", passcode);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000624:	4960      	ldr	r1, [pc, #384]	@ (80007a8 <main+0x208>)
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f9a2 	bl	8002970 <siprintf>
			UART_print(passcode_str);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fe1e 	bl	8000270 <UART_print>

			//set flag low
			update_passcode = NO_FLAG;
 8000634:	4b55      	ldr	r3, [pc, #340]	@ (800078c <main+0x1ec>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
		}
			if (detection_flag && !down_flag){
 800063a:	4b55      	ldr	r3, [pc, #340]	@ (8000790 <main+0x1f0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d075      	beq.n	800072e <main+0x18e>
 8000642:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000646:	2b00      	cmp	r3, #0
 8000648:	d171      	bne.n	800072e <main+0x18e>
				//reset screen and cursor
				UART_print("\x1B[2J");
 800064a:	4854      	ldr	r0, [pc, #336]	@ (800079c <main+0x1fc>)
 800064c:	f7ff fe10 	bl	8000270 <UART_print>
				UART_print("\x1B[H");
 8000650:	4853      	ldr	r0, [pc, #332]	@ (80007a0 <main+0x200>)
 8000652:	f7ff fe0d 	bl	8000270 <UART_print>

				//print access status
				UART_print("Enter Passcode: ");
 8000656:	4855      	ldr	r0, [pc, #340]	@ (80007ac <main+0x20c>)
 8000658:	f7ff fe0a 	bl	8000270 <UART_print>

				//get the four digit code entered by the user
				uint16_t code = get_code();
 800065c:	f000 fa04 	bl	8000a68 <get_code>
 8000660:	4603      	mov	r3, r0
 8000662:	817b      	strh	r3, [r7, #10]

				//check that code is the same as random could provided
				if(code == passcode){
 8000664:	897b      	ldrh	r3, [r7, #10]
 8000666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000668:	429a      	cmp	r2, r3
 800066a:	d12f      	bne.n	80006cc <main+0x12c>
					//reset screen and cursor
					UART_print("\x1B[2J");
 800066c:	484b      	ldr	r0, [pc, #300]	@ (800079c <main+0x1fc>)
 800066e:	f7ff fdff 	bl	8000270 <UART_print>
					UART_print("\x1B[H");
 8000672:	484b      	ldr	r0, [pc, #300]	@ (80007a0 <main+0x200>)
 8000674:	f7ff fdfc 	bl	8000270 <UART_print>

					//print access status
					UART_print("ACCESS PERMITTED");
 8000678:	484d      	ldr	r0, [pc, #308]	@ (80007b0 <main+0x210>)
 800067a:	f7ff fdf9 	bl	8000270 <UART_print>

					//set pulse time to 2ms to raise gate
					TIM3->ARR = FREQUENCY;
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <main+0x214>)
 8000680:	22f0      	movs	r2, #240	@ 0xf0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
					TIM3->CCR4 = DUTY_CYCLE_RAISE;
 8000684:	4b4b      	ldr	r3, [pc, #300]	@ (80007b4 <main+0x214>)
 8000686:	2218      	movs	r2, #24
 8000688:	641a      	str	r2, [r3, #64]	@ 0x40

					//wait for gate to hit 180 degrees
					for(int i=0; i<RAISE_TIME; i++);
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
 800068e:	e002      	b.n	8000696 <main+0xf6>
 8000690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000692:	3301      	adds	r3, #1
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
 8000696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000698:	4a47      	ldr	r2, [pc, #284]	@ (80007b8 <main+0x218>)
 800069a:	4293      	cmp	r3, r2
 800069c:	ddf8      	ble.n	8000690 <main+0xf0>

					//set pulse time to 1.5ms for neutral
					TIM3->ARR = FREQUENCY;
 800069e:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <main+0x214>)
 80006a0:	22f0      	movs	r2, #240	@ 0xf0
 80006a2:	62da      	str	r2, [r3, #44]	@ 0x2c
					TIM3->CCR4 = DUTY_CYCLE_NEUTRAL;
 80006a4:	4b43      	ldr	r3, [pc, #268]	@ (80007b4 <main+0x214>)
 80006a6:	2212      	movs	r2, #18
 80006a8:	641a      	str	r2, [r3, #64]	@ 0x40

					//delay to see access status
					for(uint32_t i = 0; i < WAIT_TIME; i++);
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
 80006ae:	e002      	b.n	80006b6 <main+0x116>
 80006b0:	6a3b      	ldr	r3, [r7, #32]
 80006b2:	3301      	adds	r3, #1
 80006b4:	623b      	str	r3, [r7, #32]
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	4a40      	ldr	r2, [pc, #256]	@ (80007bc <main+0x21c>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d3f8      	bcc.n	80006b0 <main+0x110>

					//set flags
					down_flag = FLAG;
 80006be:	2301      	movs	r3, #1
 80006c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					update_passcode = FLAG;
 80006c4:	4b31      	ldr	r3, [pc, #196]	@ (800078c <main+0x1ec>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
			if (detection_flag && !down_flag){
 80006ca:	e05d      	b.n	8000788 <main+0x1e8>
				}
				else if(code == 0){
 80006cc:	897b      	ldrh	r3, [r7, #10]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d116      	bne.n	8000700 <main+0x160>
					//reset screen and cursor
					UART_print("\x1B[2J");
 80006d2:	4832      	ldr	r0, [pc, #200]	@ (800079c <main+0x1fc>)
 80006d4:	f7ff fdcc 	bl	8000270 <UART_print>
					UART_print("\x1B[H");
 80006d8:	4831      	ldr	r0, [pc, #196]	@ (80007a0 <main+0x200>)
 80006da:	f7ff fdc9 	bl	8000270 <UART_print>

					//print access status
					UART_print("DETECTION STOPPED PREMATURELY");
 80006de:	4838      	ldr	r0, [pc, #224]	@ (80007c0 <main+0x220>)
 80006e0:	f7ff fdc6 	bl	8000270 <UART_print>

					//delay to see access status
					for(uint32_t i = 0; i < WAIT_TIME; i++);
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
 80006e8:	e002      	b.n	80006f0 <main+0x150>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3301      	adds	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	4a32      	ldr	r2, [pc, #200]	@ (80007bc <main+0x21c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d3f8      	bcc.n	80006ea <main+0x14a>
					//set flag
					update_passcode = FLAG;
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <main+0x1ec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			if (detection_flag && !down_flag){
 80006fe:	e043      	b.n	8000788 <main+0x1e8>
				}
				 else{
					//reset screen and cursor
					UART_print("\x1B[2J");
 8000700:	4826      	ldr	r0, [pc, #152]	@ (800079c <main+0x1fc>)
 8000702:	f7ff fdb5 	bl	8000270 <UART_print>
					UART_print("\x1B[H");
 8000706:	4826      	ldr	r0, [pc, #152]	@ (80007a0 <main+0x200>)
 8000708:	f7ff fdb2 	bl	8000270 <UART_print>

					//print access status
					UART_print("ACCESS DENIED");
 800070c:	482d      	ldr	r0, [pc, #180]	@ (80007c4 <main+0x224>)
 800070e:	f7ff fdaf 	bl	8000270 <UART_print>

					//delay to see access status
					for(uint32_t i = 0; i < WAIT_TIME; i++);
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	e002      	b.n	800071e <main+0x17e>
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	3301      	adds	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	4a26      	ldr	r2, [pc, #152]	@ (80007bc <main+0x21c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d3f8      	bcc.n	8000718 <main+0x178>

					//set flag
					update_passcode = FLAG;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <main+0x1ec>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
			if (detection_flag && !down_flag){
 800072c:	e02c      	b.n	8000788 <main+0x1e8>
				}
			}
			else if(down_flag && !detection_flag){
 800072e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000732:	2b00      	cmp	r3, #0
 8000734:	f43f af4e 	beq.w	80005d4 <main+0x34>
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <main+0x1f0>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	f47f af49 	bne.w	80005d4 <main+0x34>
				//wait for ~2 second
				for(int i=0; i<WAIT_TIME; i++);
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	e002      	b.n	800074e <main+0x1ae>
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4a1a      	ldr	r2, [pc, #104]	@ (80007bc <main+0x21c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	dbf8      	blt.n	8000748 <main+0x1a8>

				//set pulse time to 1ms to lower gate
				TIM3->ARR = FREQUENCY;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <main+0x214>)
 8000758:	22f0      	movs	r2, #240	@ 0xf0
 800075a:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM3->CCR4 = DUTY_CYCLE_LOWER;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <main+0x214>)
 800075e:	220c      	movs	r2, #12
 8000760:	641a      	str	r2, [r3, #64]	@ 0x40

				//wait for gate to lower to 90 degrees
				for(int i=0; i<LOWER_TIME; i++);
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	e002      	b.n	800076e <main+0x1ce>
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	3301      	adds	r3, #1
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <main+0x228>)
 8000772:	4293      	cmp	r3, r2
 8000774:	dbf8      	blt.n	8000768 <main+0x1c8>

				//set pulse time to 1.5ms for neutral
				TIM3->ARR = FREQUENCY;
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <main+0x214>)
 8000778:	22f0      	movs	r2, #240	@ 0xf0
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM3->CCR4 = DUTY_CYCLE_NEUTRAL;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <main+0x214>)
 800077e:	2212      	movs	r2, #18
 8000780:	641a      	str	r2, [r3, #64]	@ 0x40
				//set flag
				down_flag = NO_FLAG;
 8000782:	2300      	movs	r3, #0
 8000784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if(update_passcode && !detection_flag){
 8000788:	e724      	b.n	80005d4 <main+0x34>
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000
 8000790:	2000008c 	.word	0x2000008c
 8000794:	50060800 	.word	0x50060800
 8000798:	d1b71759 	.word	0xd1b71759
 800079c:	080032d4 	.word	0x080032d4
 80007a0:	080032dc 	.word	0x080032dc
 80007a4:	080032e0 	.word	0x080032e0
 80007a8:	080032ec 	.word	0x080032ec
 80007ac:	080032f4 	.word	0x080032f4
 80007b0:	08003308 	.word	0x08003308
 80007b4:	40000400 	.word	0x40000400
 80007b8:	002dc6bf 	.word	0x002dc6bf
 80007bc:	007a1200 	.word	0x007a1200
 80007c0:	0800331c 	.word	0x0800331c
 80007c4:	0800333c 	.word	0x0800333c
 80007c8:	0030d400 	.word	0x0030d400

080007cc <TIM2_IRQHandler>:
			}
  	  	 }
}

void TIM2_IRQHandler(void){
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	// check for CC1 flag
	if (TIM2->SR & TIM_SR_CC1IF){
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00e      	beq.n	80007fc <TIM2_IRQHandler+0x30>
		//turn off trigger
		GPIOB->ODR &= ~(GPIO_ODR_OD0);
 80007de:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <TIM2_IRQHandler+0x11c>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a41      	ldr	r2, [pc, #260]	@ (80008e8 <TIM2_IRQHandler+0x11c>)
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	6153      	str	r3, [r2, #20]
		//clear and update CCR1 flag
		TIM2->SR &= ~(TIM_SR_CC1IF);
 80007ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	6113      	str	r3, [r2, #16]
		//turn on trigger
		GPIOB->ODR |= (GPIO_ODR_OD0);
		// clear update event interrupt flag
		TIM2->SR &= ~(TIM_SR_UIF);
	}
}
 80007fa:	e070      	b.n	80008de <TIM2_IRQHandler+0x112>
	else if (TIM2->SR & TIM_SR_CC2IF){
 80007fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	2b00      	cmp	r3, #0
 8000808:	d054      	beq.n	80008b4 <TIM2_IRQHandler+0xe8>
		if(sample == FIRST_SAMPLE){
 800080a:	4b38      	ldr	r3, [pc, #224]	@ (80008ec <TIM2_IRQHandler+0x120>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d113      	bne.n	800083a <TIM2_IRQHandler+0x6e>
			time_one = TIM2->CNT;
 8000812:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000818:	4a35      	ldr	r2, [pc, #212]	@ (80008f0 <TIM2_IRQHandler+0x124>)
 800081a:	6013      	str	r3, [r2, #0]
			sample++;
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <TIM2_IRQHandler+0x120>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <TIM2_IRQHandler+0x120>)
 8000826:	701a      	strb	r2, [r3, #0]
			TIM2->CCER |= TIM_CCER_CC2P;
 8000828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6213      	str	r3, [r2, #32]
 8000838:	e033      	b.n	80008a2 <TIM2_IRQHandler+0xd6>
		else if (sample == SECOND_SAMPLE){
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <TIM2_IRQHandler+0x120>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d12f      	bne.n	80008a2 <TIM2_IRQHandler+0xd6>
			time_two = TIM2->CNT;
 8000842:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000848:	4a2a      	ldr	r2, [pc, #168]	@ (80008f4 <TIM2_IRQHandler+0x128>)
 800084a:	6013      	str	r3, [r2, #0]
			sample = FIRST_SAMPLE;
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <TIM2_IRQHandler+0x120>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
			if(time_two - time_one <= MAX_ECHO_TIME){
 8000852:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <TIM2_IRQHandler+0x128>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <TIM2_IRQHandler+0x124>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f246 0222 	movw	r2, #24610	@ 0x6022
 8000860:	4293      	cmp	r3, r2
 8000862:	d80b      	bhi.n	800087c <TIM2_IRQHandler+0xb0>
				detection_flag = FLAG;
 8000864:	4b24      	ldr	r3, [pc, #144]	@ (80008f8 <TIM2_IRQHandler+0x12c>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
				GPIOA->ODR |= (GPIO_ODR_OD5);
 800086a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	e00a      	b.n	8000892 <TIM2_IRQHandler+0xc6>
				detection_flag = NO_FLAG;
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <TIM2_IRQHandler+0x12c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
				GPIOA->ODR &= ~(GPIO_ODR_OD5);
 8000882:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800088c:	f023 0320 	bic.w	r3, r3, #32
 8000890:	6153      	str	r3, [r2, #20]
			TIM2->CCER &= ~TIM_CCER_CC2P;
 8000892:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000896:	6a1b      	ldr	r3, [r3, #32]
 8000898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800089c:	f023 0320 	bic.w	r3, r3, #32
 80008a0:	6213      	str	r3, [r2, #32]
		TIM2->SR &= ~(TIM_SR_CC2IF);
 80008a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ac:	f023 0304 	bic.w	r3, r3, #4
 80008b0:	6113      	str	r3, [r2, #16]
}
 80008b2:	e014      	b.n	80008de <TIM2_IRQHandler+0x112>
	else if (TIM2->SR & TIM_SR_UIF){
 80008b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008b8:	691b      	ldr	r3, [r3, #16]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00d      	beq.n	80008de <TIM2_IRQHandler+0x112>
		GPIOB->ODR |= (GPIO_ODR_OD0);
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <TIM2_IRQHandler+0x11c>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <TIM2_IRQHandler+0x11c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6153      	str	r3, [r2, #20]
		TIM2->SR &= ~(TIM_SR_UIF);
 80008ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	6113      	str	r3, [r2, #16]
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	48000400 	.word	0x48000400
 80008ec:	2000008d 	.word	0x2000008d
 80008f0:	20000090 	.word	0x20000090
 80008f4:	20000094 	.word	0x20000094
 80008f8:	2000008c 	.word	0x2000008c

080008fc <LED_init>:

void LED_init(void){
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	// Enable GPIOA Clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <LED_init+0x6c>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	4a18      	ldr	r2, [pc, #96]	@ (8000968 <LED_init+0x6c>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// Set MODER to output
	GPIOA->MODER &= ~(GPIO_MODER_MODE5);
 800090c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000916:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800091a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE5_0);
 800091c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800092a:	6013      	str	r3, [r2, #0]
	//set push-pull output type
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5);
 800092c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000936:	f023 0320 	bic.w	r3, r3, #32
 800093a:	6053      	str	r3, [r2, #4]
	//no PUPD
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);
 800093c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000946:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800094a:	60d3      	str	r3, [r2, #12]
	//set to high speed
	GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5);
 800094c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000956:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800095a:	6093      	str	r3, [r2, #8]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <sensor_init>:

void sensor_init(void){
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	//configure GPIOB clock
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <sensor_init+0xa0>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000974:	4a25      	ldr	r2, [pc, #148]	@ (8000a0c <sensor_init+0xa0>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/*----- Configure PB0 as sensor trigger -----*/
	//setup MODER as output
	GPIOB->MODER &= ~(GPIO_MODER_MODE0);
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <sensor_init+0xa4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a23      	ldr	r2, [pc, #140]	@ (8000a10 <sensor_init+0xa4>)
 8000982:	f023 0303 	bic.w	r3, r3, #3
 8000986:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE0_0);
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <sensor_init+0xa4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a20      	ldr	r2, [pc, #128]	@ (8000a10 <sensor_init+0xa4>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]
	//set push-pull
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT0);
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <sensor_init+0xa4>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <sensor_init+0xa4>)
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6053      	str	r3, [r2, #4]
	//no pull-up/pull-down
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD0);
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <sensor_init+0xa4>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a10 <sensor_init+0xa4>)
 80009a6:	f023 0303 	bic.w	r3, r3, #3
 80009aa:	60d3      	str	r3, [r2, #12]
	//set to high speed
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEED0);
 80009ac:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <sensor_init+0xa4>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <sensor_init+0xa4>)
 80009b2:	f043 0303 	orr.w	r3, r3, #3
 80009b6:	6093      	str	r3, [r2, #8]

	/*----- Configure PB3 as sensor echo -----*/
	//set to alternate function
	GPIOB->MODER &= ~(GPIO_MODER_MODER3);
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <sensor_init+0xa4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <sensor_init+0xa4>)
 80009be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80009c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE3_1);
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <sensor_init+0xa4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a11      	ldr	r2, [pc, #68]	@ (8000a10 <sensor_init+0xa4>)
 80009ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ce:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (1 << GPIO_AFRL_AFSEL3_Pos);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <sensor_init+0xa4>)
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <sensor_init+0xa4>)
 80009d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009da:	6213      	str	r3, [r2, #32]
	//set push-pull
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT3);
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <sensor_init+0xa4>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <sensor_init+0xa4>)
 80009e2:	f023 0308 	bic.w	r3, r3, #8
 80009e6:	6053      	str	r3, [r2, #4]
	//pull-down
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD3);
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <sensor_init+0xa4>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <sensor_init+0xa4>)
 80009ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80009f2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD3_1);
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <sensor_init+0xa4>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <sensor_init+0xa4>)
 80009fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fe:	60d3      	str	r3, [r2, #12]

}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400

08000a14 <motor_init>:

void motor_init(void){
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
	//configure GPIOB clock
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <motor_init+0x4c>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <motor_init+0x4c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/*---- Configure PB2 as motor signal-----*/
	//setup as alternate function
	GPIOB->MODER &= ~GPIO_MODER_MODE1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <motor_init+0x50>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <motor_init+0x50>)
 8000a2a:	f023 030c 	bic.w	r3, r3, #12
 8000a2e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE1_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <motor_init+0x50>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <motor_init+0x50>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] &= ~GPIO_AFRL_AFSEL1;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <motor_init+0x50>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <motor_init+0x50>)
 8000a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a46:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (2 << GPIO_AFRL_AFSEL1_Pos);
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <motor_init+0x50>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a05      	ldr	r2, [pc, #20]	@ (8000a64 <motor_init+0x50>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6213      	str	r3, [r2, #32]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400

08000a68 <get_code>:

/**
  * @brief: Function to read 4 key-presses
  * @retval: int16_t
  */
uint16_t get_code(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
	//configure variables
	uint16_t dig_total= 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	81fb      	strh	r3, [r7, #14]
	int16_t dig1 = NO_PRESS;
 8000a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a76:	82fb      	strh	r3, [r7, #22]
	int16_t dig2 = NO_PRESS;
 8000a78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a7c:	82bb      	strh	r3, [r7, #20]
	int16_t dig3 = NO_PRESS;
 8000a7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a82:	827b      	strh	r3, [r7, #18]
	int16_t dig4 = NO_PRESS;
 8000a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a88:	823b      	strh	r3, [r7, #16]
	while(dig1 == NO_PRESS){ //wait for key-press
 8000a8a:	e009      	b.n	8000aa0 <get_code+0x38>
	  dig1 = keypad_func(); //read key-press of first digit
 8000a8c:	f7ff fd00 	bl	8000490 <keypad_func>
 8000a90:	4603      	mov	r3, r0
 8000a92:	82fb      	strh	r3, [r7, #22]
	  //leave if detection stops
	  if(!detection_flag){
 8000a94:	4b55      	ldr	r3, [pc, #340]	@ (8000bec <get_code+0x184>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d101      	bne.n	8000aa0 <get_code+0x38>
		  return NO_FLAG;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e0a1      	b.n	8000be4 <get_code+0x17c>
	while(dig1 == NO_PRESS){ //wait for key-press
 8000aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d0f0      	beq.n	8000a8c <get_code+0x24>
	  }
	}
	while(keypad_func()!= NO_PRESS);//wait for key release
 8000aaa:	bf00      	nop
 8000aac:	f7ff fcf0 	bl	8000490 <keypad_func>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d1f9      	bne.n	8000aac <get_code+0x44>
	//print first digit
	char dig1_str[2];
	sprintf(dig1_str, "%u", dig1);
 8000ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	494b      	ldr	r1, [pc, #300]	@ (8000bf0 <get_code+0x188>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 ff54 	bl	8002970 <siprintf>
	UART_print(dig1_str);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fbcf 	bl	8000270 <UART_print>
	while(dig2 == NO_PRESS){ //wait for second key-press
 8000ad2:	e009      	b.n	8000ae8 <get_code+0x80>
	  dig2 = keypad_func(); //read key-press of second digit
 8000ad4:	f7ff fcdc 	bl	8000490 <keypad_func>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	82bb      	strh	r3, [r7, #20]
	  //leave if detection stops
	  if(!detection_flag){
 8000adc:	4b43      	ldr	r3, [pc, #268]	@ (8000bec <get_code+0x184>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <get_code+0x80>
		  return NO_FLAG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e07d      	b.n	8000be4 <get_code+0x17c>
	while(dig2 == NO_PRESS){ //wait for second key-press
 8000ae8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d0f0      	beq.n	8000ad4 <get_code+0x6c>
	  }
	}
	while(keypad_func()!= NO_PRESS);//wait for key release
 8000af2:	bf00      	nop
 8000af4:	f7ff fccc 	bl	8000490 <keypad_func>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afe:	d1f9      	bne.n	8000af4 <get_code+0x8c>
	//print second digit
	char dig2_str[2];
	sprintf(dig2_str, "%u", dig2);
 8000b00:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4939      	ldr	r1, [pc, #228]	@ (8000bf0 <get_code+0x188>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 ff30 	bl	8002970 <siprintf>
	UART_print(dig2_str);
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fbab 	bl	8000270 <UART_print>
	while(dig3 == NO_PRESS){ //wait for third key-press
 8000b1a:	e009      	b.n	8000b30 <get_code+0xc8>
	  dig3 = keypad_func(); //read key-press of third digit
 8000b1c:	f7ff fcb8 	bl	8000490 <keypad_func>
 8000b20:	4603      	mov	r3, r0
 8000b22:	827b      	strh	r3, [r7, #18]
	  //leave if detection stops
	  if(!detection_flag){
 8000b24:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <get_code+0x184>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <get_code+0xc8>
		  return NO_FLAG;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e059      	b.n	8000be4 <get_code+0x17c>
	while(dig3 == NO_PRESS){ //wait for third key-press
 8000b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d0f0      	beq.n	8000b1c <get_code+0xb4>
	  }
	}
	while(keypad_func()!= NO_PRESS); //wait for key release
 8000b3a:	bf00      	nop
 8000b3c:	f7ff fca8 	bl	8000490 <keypad_func>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b46:	d1f9      	bne.n	8000b3c <get_code+0xd4>
	//print third digit
	char dig3_str[2];
	sprintf(dig3_str, "%u", dig3);
 8000b48:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4928      	ldr	r1, [pc, #160]	@ (8000bf0 <get_code+0x188>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 ff0d 	bl	8002970 <siprintf>
	UART_print(dig3_str);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb89 	bl	8000270 <UART_print>
	while(dig4 == NO_PRESS){ //wait for fourth key-press
 8000b5e:	e009      	b.n	8000b74 <get_code+0x10c>
	  dig4 = keypad_func(); //read key-press of fourth digit
 8000b60:	f7ff fc96 	bl	8000490 <keypad_func>
 8000b64:	4603      	mov	r3, r0
 8000b66:	823b      	strh	r3, [r7, #16]
	  //leave if detection stops
	  if(!detection_flag){
 8000b68:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <get_code+0x184>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <get_code+0x10c>
		  return NO_FLAG;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e037      	b.n	8000be4 <get_code+0x17c>
	while(dig4 == NO_PRESS){ //wait for fourth key-press
 8000b74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d0f0      	beq.n	8000b60 <get_code+0xf8>
	  }
	}
	while(keypad_func()!= NO_PRESS); //wait for key release
 8000b7e:	bf00      	nop
 8000b80:	f7ff fc86 	bl	8000490 <keypad_func>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8a:	d1f9      	bne.n	8000b80 <get_code+0x118>
	//print fourth digit
	char dig4_str[2];
	sprintf(dig4_str, "%u", dig4);
 8000b8c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000b90:	463b      	mov	r3, r7
 8000b92:	4917      	ldr	r1, [pc, #92]	@ (8000bf0 <get_code+0x188>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 feeb 	bl	8002970 <siprintf>
	UART_print(dig4_str);
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fb67 	bl	8000270 <UART_print>
	//combine digits to get code entered
	dig_total = (dig1 * 1000) + (dig2 * 100) + (dig3 * 10) + dig4;
 8000ba2:	8afb      	ldrh	r3, [r7, #22]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	0152      	lsls	r2, r2, #5
 8000ba8:	1ad2      	subs	r2, r2, r3
 8000baa:	0092      	lsls	r2, r2, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	8abb      	ldrh	r3, [r7, #20]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	0089      	lsls	r1, r1, #2
 8000bb8:	440b      	add	r3, r1
 8000bba:	4619      	mov	r1, r3
 8000bbc:	0088      	lsls	r0, r1, #2
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	440b      	add	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	8a7b      	ldrh	r3, [r7, #18]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	0089      	lsls	r1, r1, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	8a3b      	ldrh	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	81fb      	strh	r3, [r7, #14]

	return dig_total;
 8000be2:	89fb      	ldrh	r3, [r7, #14]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000008c 	.word	0x2000008c
 8000bf0:	0800334c 	.word	0x0800334c

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b096      	sub	sp, #88	@ 0x58
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2244      	movs	r2, #68	@ 0x44
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fed4 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c1a:	f000 fb77 	bl	800130c <HAL_PWREx_ControlVoltageScaling>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c24:	f000 f840 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000c34:	23b0      	movs	r3, #176	@ 0xb0
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fbb9 	bl	80013b8 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 f82c 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	2102      	movs	r1, #2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 ff81 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c74:	f000 f818 	bl	8000ca8 <Error_Handler>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3758      	adds	r7, #88	@ 0x58
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_RNG_Init+0x20>)
 8000c86:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <MX_RNG_Init+0x24>)
 8000c88:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_RNG_Init+0x20>)
 8000c8c:	f001 fe18 	bl	80028c0 <HAL_RNG_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c96:	f000 f807 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000007c 	.word	0x2000007c
 8000ca4:	50060800 	.word	0x50060800

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x44>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a6      	sub	sp, #152	@ 0x98
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2288      	movs	r2, #136	@ 0x88
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fe4f 	bl	80029b0 <memset>
  if(hrng->Instance==RNG)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_RNG_MspInit+0x80>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d12b      	bne.n	8000d74 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000d1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000d20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000d22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000d32:	2308      	movs	r3, #8
 8000d34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d36:	2307      	movs	r3, #7
 8000d38:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000d42:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f8fb 	bl	8001f48 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8000d58:	f7ff ffa6 	bl	8000ca8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_RNG_MspInit+0x84>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_RNG_MspInit+0x84>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_RNG_MspInit+0x84>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3798      	adds	r7, #152	@ 0x98
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	50060800 	.word	0x50060800
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f983 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f001 fdd4 	bl	80029c0 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20018000 	.word	0x20018000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000098 	.word	0x20000098
 8000e4c:	200001e8 	.word	0x200001e8

08000e50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <TIM2_init>:
 *      Author: firaz
 */
#include "main.h"
#include "timer.h"

void TIM2_init(void){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	//configure TIM2 clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);
 8000eb4:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <TIM2_init+0xa0>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb8:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <TIM2_init+0xa0>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6593      	str	r3, [r2, #88]	@ 0x58
	//set TIM2 to count up
	TIM2->CR1 &= ~(TIM_CR1_DIR);
 8000ec0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eca:	f023 0310 	bic.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
	//set measuring time
	TIM2->ARR = MEASUREMENT_TIME;
 8000ed0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <TIM2_init+0xa4>)
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
	//set time of trigger event
	TIM2->CCR1 = TRIGGER_TIME;
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000edc:	f240 12df 	movw	r2, #479	@ 0x1df
 8000ee0:	635a      	str	r2, [r3, #52]	@ 0x34
	//configure channel 2 as input
	TIM2->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000ee2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6193      	str	r3, [r2, #24]
	//rising edge polarity
	TIM2->CCER &= ~TIM_CCER_CC2P;
 8000ef2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000efc:	f023 0320 	bic.w	r3, r3, #32
 8000f00:	6213      	str	r3, [r2, #32]
	//Enable capture on Channel 2
	TIM2->CCER |= TIM_CCER_CC2E;
 8000f02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6213      	str	r3, [r2, #32]
	//enable update event interrupt in TIM2
	TIM2->DIER |= (TIM_DIER_UIE | TIM_DIER_CC1IE | TIM_DIER_CC2IE);
 8000f12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1c:	f043 0307 	orr.w	r3, r3, #7
 8000f20:	60d3      	str	r3, [r2, #12]
	//clear the flag before starting
	TIM2->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF | TIM_SR_CC2IF);
 8000f22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2c:	f023 0307 	bic.w	r3, r3, #7
 8000f30:	6113      	str	r3, [r2, #16]
	//start timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6013      	str	r3, [r2, #0]
	//enable TIM2 in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000f42:	201c      	movs	r0, #28
 8000f44:	f7ff ff96 	bl	8000e74 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f48:	b662      	cpsie	i
}
 8000f4a:	bf00      	nop
	//enable interrupts globally
	__enable_irq();
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	002bf1ff 	.word	0x002bf1ff

08000f58 <TIM3_init>:

void TIM3_init(void){
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	//configure TIM3 clock
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM3EN);
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <TIM3_init+0x88>)
 8000f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f60:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <TIM3_init+0x88>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	6593      	str	r3, [r2, #88]	@ 0x58
	// Prescaler of 0 (40MHz clock)
	TIM3->PSC = PRESCALER;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f6a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
	//set PWM Mode 1 (OC4M = 110)
	TIM3->CCMR2 &= ~TIM_CCMR2_OC4M_Msk;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000f7e:	61d3      	str	r3, [r2, #28]
	TIM3->CCMR2 |= (6 << TIM_CCMR2_OC4M_Pos);
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f86:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000f8a:	61d3      	str	r3, [r2, #28]
	//enable preload for CCR4
	TIM3->CCMR2 |= TIM_CCMR2_OC4PE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a14      	ldr	r2, [pc, #80]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f96:	61d3      	str	r3, [r2, #28]
	//enable timere 3 channel 4
	TIM3->CCER |= TIM_CCER_CC4E;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <TIM3_init+0x8c>)
 8000f9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fa2:	6213      	str	r3, [r2, #32]
	//set to 50Hz
	TIM3->ARR = FREQUENCY;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fa6:	22f0      	movs	r2, #240	@ 0xf0
 8000fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	//set 7.5% duty cycle
	TIM3->CCR4 = DUTY_CYCLE_NEUTRAL;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fac:	2212      	movs	r2, #18
 8000fae:	641a      	str	r2, [r3, #64]	@ 0x40
	//enable ARR preload
	TIM3->CR1 |= TIM_CR1_ARPE;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fba:	6013      	str	r3, [r2, #0]
	//generate an update event to load registers
	TIM3->EGR |= TIM_EGR_UG;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6153      	str	r3, [r2, #20]
	//start the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <TIM3_init+0x8c>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]

}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40000400 	.word	0x40000400

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff ff30 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	@ (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	@ (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f001 fcd9 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff fac1 	bl	80005a0 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800102c:	080033d4 	.word	0x080033d4
  ldr r2, =_sbss
 8001030:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001034:	200001e8 	.word	0x200001e8

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>

0800103a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 f91f 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	200f      	movs	r0, #15
 800104c:	f000 f80e 	bl	800106c <HAL_InitTick>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105c:	f7ff fe2a 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <HAL_InitTick+0x6c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d023      	beq.n	80010c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <HAL_InitTick+0x70>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f91d 	bl	80012d6 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10f      	bne.n	80010c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d809      	bhi.n	80010bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f8f5 	bl	800129e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_InitTick+0x74>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e007      	b.n	80010cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e004      	b.n	80010cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e001      	b.n	80010cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000000c 	.word	0x2000000c
 80010dc:	20000004 	.word	0x20000004
 80010e0:	20000008 	.word	0x20000008

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	2000000c 	.word	0x2000000c
 8001108:	2000009c 	.word	0x2000009c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000009c 	.word	0x2000009c

08001124 <__NVIC_SetPriorityGrouping>:
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	@ (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	@ (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	@ 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff5c 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff8e 	bl	80011dc <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffb0 	bl	8001244 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <HAL_PWREx_GetVoltageRange+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800131a:	d130      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800131c:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001328:	d038      	beq.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001332:	4a1e      	ldr	r2, [pc, #120]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2232      	movs	r2, #50	@ 0x32
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9b      	lsrs	r3, r3, #18
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001350:	e002      	b.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3b01      	subs	r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001364:	d102      	bne.n	800136c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f2      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001378:	d110      	bne.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e00f      	b.n	800139e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138a:	d007      	beq.n	800139c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001394:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40007000 	.word	0x40007000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e3ca      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ca:	4b97      	ldr	r3, [pc, #604]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d4:	4b94      	ldr	r3, [pc, #592]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80e4 	beq.w	80015b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_RCC_OscConfig+0x4a>
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	2b0c      	cmp	r3, #12
 80013f6:	f040 808b 	bne.w	8001510 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	f040 8087 	bne.w	8001510 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001402:	4b89      	ldr	r3, [pc, #548]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x62>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e3a2      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1a      	ldr	r2, [r3, #32]
 800141e:	4b82      	ldr	r3, [pc, #520]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <HAL_RCC_OscConfig+0x7c>
 800142a:	4b7f      	ldr	r3, [pc, #508]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001432:	e005      	b.n	8001440 <HAL_RCC_OscConfig+0x88>
 8001434:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001440:	4293      	cmp	r3, r2
 8001442:	d223      	bcs.n	800148c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fd1d 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e383      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001458:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a72      	ldr	r2, [pc, #456]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b70      	ldr	r3, [pc, #448]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	496d      	ldr	r1, [pc, #436]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001476:	4b6c      	ldr	r3, [pc, #432]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	4968      	ldr	r1, [pc, #416]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001486:	4313      	orrs	r3, r2
 8001488:	604b      	str	r3, [r1, #4]
 800148a:	e025      	b.n	80014d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a65      	ldr	r2, [pc, #404]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b63      	ldr	r3, [pc, #396]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4960      	ldr	r1, [pc, #384]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	495b      	ldr	r1, [pc, #364]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fcdd 	bl	8001e88 <RCC_SetFlashLatencyFromMSIRange>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e343      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d8:	f000 fc4a 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b52      	ldr	r3, [pc, #328]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f003 030f 	and.w	r3, r3, #15
 80014e8:	4950      	ldr	r1, [pc, #320]	@ (800162c <HAL_RCC_OscConfig+0x274>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
 80014f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001630 <HAL_RCC_OscConfig+0x278>)
 80014f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fdb5 	bl	800106c <HAL_InitTick>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d052      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	e327      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d032      	beq.n	800157e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001518:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a42      	ldr	r2, [pc, #264]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001524:	f7ff fdf2 	bl	800110c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152c:	f7ff fdee 	bl	800110c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e310      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154a:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a36      	ldr	r2, [pc, #216]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b34      	ldr	r3, [pc, #208]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4931      	ldr	r1, [pc, #196]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001568:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	492c      	ldr	r1, [pc, #176]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e01a      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157e:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158a:	f7ff fdbf 	bl	800110c <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff fdbb 	bl	800110c <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e2dd      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a4:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x1da>
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d074      	beq.n	80016aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x21a>
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	d10e      	bne.n	80015ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d10b      	bne.n	80015ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d064      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d160      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e2ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x24a>
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 80015fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e026      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160a:	d115      	bne.n	8001638 <HAL_RCC_OscConfig+0x280>
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 8001612:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a02      	ldr	r2, [pc, #8]	@ (8001628 <HAL_RCC_OscConfig+0x270>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x298>
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	08003350 	.word	0x08003350
 8001630:	20000004 	.word	0x20000004
 8001634:	20000008 	.word	0x20000008
 8001638:	4ba0      	ldr	r3, [pc, #640]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9f      	ldr	r2, [pc, #636]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b9d      	ldr	r3, [pc, #628]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9c      	ldr	r2, [pc, #624]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800164e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fd58 	bl	800110c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fd54 	bl	800110c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	@ 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e276      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001672:	4b92      	ldr	r3, [pc, #584]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2a8>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fd44 	bl	800110c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fd40 	bl	800110c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e262      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169a:	4b88      	ldr	r3, [pc, #544]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d0>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d060      	beq.n	8001778 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x310>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c8:	4b7c      	ldr	r3, [pc, #496]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_OscConfig+0x328>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e23f      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e0:	4b76      	ldr	r3, [pc, #472]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	4973      	ldr	r1, [pc, #460]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f4:	e040      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d023      	beq.n	8001746 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fe:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6e      	ldr	r2, [pc, #440]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fcff 	bl	800110c <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fcfb 	bl	800110c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e21d      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001724:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	495f      	ldr	r1, [pc, #380]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b5d      	ldr	r3, [pc, #372]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5c      	ldr	r2, [pc, #368]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff fcdb 	bl	800110c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff fcd7 	bl	800110c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1f9      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800176c:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d03c      	beq.n	80017fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001792:	4a4a      	ldr	r2, [pc, #296]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fcb6 	bl	800110c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fcb2 	bl	800110c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1d4      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ef      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3ec>
 80017c4:	e01b      	b.n	80017fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017cc:	4a3b      	ldr	r2, [pc, #236]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d6:	f7ff fc99 	bl	800110c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fc95 	bl	800110c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1b7      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f0:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ef      	bne.n	80017de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 80a6 	beq.w	8001958 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10d      	bne.n	8001838 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001834:	2301      	movs	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d118      	bne.n	8001876 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001844:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001850:	f7ff fc5c 	bl	800110c <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fc58 	bl	800110c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e17a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_RCC_OscConfig+0x508>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d108      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d8>
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800188e:	e029      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d115      	bne.n	80018c4 <HAL_RCC_OscConfig+0x50c>
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189e:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ae:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x52c>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ca:	4a9b      	ldr	r2, [pc, #620]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018d4:	4b98      	ldr	r3, [pc, #608]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	4a97      	ldr	r2, [pc, #604]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fc0e 	bl	800110c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fc0a 	bl	800110c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e12a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x53c>
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fbf7 	bl	800110c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fbf3 	bl	800110c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e113      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001946:	7ffb      	ldrb	r3, [r7, #31]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001950:	4a79      	ldr	r2, [pc, #484]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001956:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80fe 	beq.w	8001b5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	2b02      	cmp	r3, #2
 8001968:	f040 80d0 	bne.w	8001b0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800196c:	4b72      	ldr	r3, [pc, #456]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0203 	and.w	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	429a      	cmp	r2, r3
 800197e:	d130      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	3b01      	subs	r3, #1
 800198c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d127      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ac:	2a07      	cmp	r2, #7
 80019ae:	bf14      	ite	ne
 80019b0:	2201      	movne	r2, #1
 80019b2:	2200      	moveq	r2, #0
 80019b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d113      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	3b01      	subs	r3, #1
 80019dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d06e      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d069      	beq.n	8001abc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019f4:	4b50      	ldr	r3, [pc, #320]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0ad      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a04:	4b4c      	ldr	r3, [pc, #304]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a4b      	ldr	r2, [pc, #300]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a10:	f7ff fb7c 	bl	800110c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fb78 	bl	800110c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e09a      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	4b43      	ldr	r3, [pc, #268]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	4b40      	ldr	r3, [pc, #256]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	4b40      	ldr	r3, [pc, #256]	@ (8001b3c <HAL_RCC_OscConfig+0x784>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a46:	3a01      	subs	r2, #1
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a50:	0212      	lsls	r2, r2, #8
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a58:	0852      	lsrs	r2, r2, #1
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0552      	lsls	r2, r2, #21
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a64:	0852      	lsrs	r2, r2, #1
 8001a66:	3a01      	subs	r2, #1
 8001a68:	0652      	lsls	r2, r2, #25
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a70:	0912      	lsrs	r2, r2, #4
 8001a72:	0452      	lsls	r2, r2, #17
 8001a74:	430a      	orrs	r2, r1
 8001a76:	4930      	ldr	r1, [pc, #192]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2d      	ldr	r2, [pc, #180]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a94:	f7ff fb3a 	bl	800110c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff fb36 	bl	800110c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e058      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aba:	e050      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04f      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d148      	bne.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4a16      	ldr	r2, [pc, #88]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ae2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae4:	f7ff fb12 	bl	800110c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fb0e 	bl	800110c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e030      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x734>
 8001b0a:	e028      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d023      	beq.n	8001b5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <HAL_RCC_OscConfig+0x780>)
 8001b18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff faf5 	bl	800110c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	e00c      	b.n	8001b40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff faf1 	bl	800110c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d905      	bls.n	8001b40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e013      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b40:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1ec      	bne.n	8001b26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4905      	ldr	r1, [pc, #20]	@ (8001b68 <HAL_RCC_OscConfig+0x7b0>)
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_RCC_OscConfig+0x7b4>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e001      	b.n	8001b5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	feeefffc 	.word	0xfeeefffc

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0e7      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b75      	ldr	r3, [pc, #468]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b72      	ldr	r3, [pc, #456]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4970      	ldr	r1, [pc, #448]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cf      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b66      	ldr	r3, [pc, #408]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d908      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b63      	ldr	r3, [pc, #396]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4960      	ldr	r1, [pc, #384]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04c      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0a6      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e09a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	4b4e      	ldr	r3, [pc, #312]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c36:	4b4a      	ldr	r3, [pc, #296]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e086      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b46      	ldr	r3, [pc, #280]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4943      	ldr	r1, [pc, #268]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff fa58 	bl	800110c <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff fa54 	bl	800110c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e06e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b3a      	ldr	r3, [pc, #232]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b31      	ldr	r3, [pc, #196]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d208      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	492b      	ldr	r1, [pc, #172]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb6:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d210      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4923      	ldr	r1, [pc, #140]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e036      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4918      	ldr	r1, [pc, #96]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4910      	ldr	r1, [pc, #64]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d24:	f000 f824 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	490b      	ldr	r1, [pc, #44]	@ (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_ClockConfig+0x1fc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f98f 	bl	800106c <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003350 	.word	0x08003350
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d11e      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da4:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db0:	4b31      	ldr	r3, [pc, #196]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e004      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d134      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d003      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xac>
 8001e14:	e005      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1e:	617b      	str	r3, [r7, #20]
      break;
 8001e20:	e002      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	3301      	adds	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0e5b      	lsrs	r3, r3, #25
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08003360 	.word	0x08003360
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	007a1200 	.word	0x007a1200

08001e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e94:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea0:	f7ff fa26 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 8001ea4:	6178      	str	r0, [r7, #20]
 8001ea6:	e014      	b.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff fa16 	bl	80012f0 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d10b      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d919      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ee4:	d902      	bls.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e013      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e010      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d902      	bls.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ef8:	2303      	movs	r3, #3
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e00a      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b80      	cmp	r3, #128	@ 0x80
 8001f02:	d102      	bne.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f04:	2302      	movs	r3, #2
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e004      	b.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b70      	cmp	r3, #112	@ 0x70
 8001f0e:	d101      	bne.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4909      	ldr	r1, [pc, #36]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f24:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40022000 	.word	0x40022000

08001f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f50:	2300      	movs	r3, #0
 8001f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d041      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f72:	d824      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f7e:	d81e      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b86      	ldr	r3, [pc, #536]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a85      	ldr	r2, [pc, #532]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fabb 	bl	800251c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fba6 	bl	8002704 <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fcc:	4b76      	ldr	r3, [pc, #472]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fda:	4973      	ldr	r1, [pc, #460]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d041      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ff8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ffc:	d02a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ffe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002002:	d824      	bhi.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002008:	d008      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800200a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800200e:	d81e      	bhi.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002018:	d010      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800201a:	e018      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800201c:	4b62      	ldr	r3, [pc, #392]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4a61      	ldr	r2, [pc, #388]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002026:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002028:	e015      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa73 	bl	800251c <RCCEx_PLLSAI1_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800203a:	e00c      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3320      	adds	r3, #32
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fb5e 	bl	8002704 <RCCEx_PLLSAI2_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800204c:	e003      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	74fb      	strb	r3, [r7, #19]
      break;
 8002052:	e000      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002056:	7cfb      	ldrb	r3, [r7, #19]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800205c:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800206a:	494f      	ldr	r1, [pc, #316]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002072:	e001      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a0 	beq.w	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800208a:	4b47      	ldr	r3, [pc, #284]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800209a:	2300      	movs	r3, #0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00d      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	4b41      	ldr	r3, [pc, #260]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	4a40      	ldr	r2, [pc, #256]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ac:	4b3e      	ldr	r3, [pc, #248]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b8:	2301      	movs	r3, #1
 80020ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020bc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c8:	f7ff f820 	bl	800110c <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ce:	e009      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7ff f81c 	bl	800110c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d902      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	74fb      	strb	r3, [r7, #19]
        break;
 80020e2:	e005      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020e4:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d15c      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020f6:	4b2c      	ldr	r3, [pc, #176]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002100:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d019      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002114:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002126:	4a20      	ldr	r2, [pc, #128]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002140:	4a19      	ldr	r2, [pc, #100]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe ffdb 	bl	800110c <HAL_GetTick>
 8002156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002158:	e00b      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe ffd7 	bl	800110c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d902      	bls.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	74fb      	strb	r3, [r7, #19]
            break;
 8002170:	e006      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ec      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002180:	7cfb      	ldrb	r3, [r7, #19]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002186:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800218c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002196:	4904      	ldr	r1, [pc, #16]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800219e:	e009      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
 80021a4:	e006      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b4:	7c7b      	ldrb	r3, [r7, #17]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	4a9d      	ldr	r2, [pc, #628]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d2:	4b98      	ldr	r3, [pc, #608]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f023 0203 	bic.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e0:	4994      	ldr	r1, [pc, #592]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 020c 	bic.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	498c      	ldr	r1, [pc, #560]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002216:	4b87      	ldr	r3, [pc, #540]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4983      	ldr	r1, [pc, #524]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002238:	4b7e      	ldr	r3, [pc, #504]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	497b      	ldr	r1, [pc, #492]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800225a:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	4972      	ldr	r1, [pc, #456]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800227c:	4b6d      	ldr	r3, [pc, #436]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	496a      	ldr	r1, [pc, #424]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800229e:	4b65      	ldr	r3, [pc, #404]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	4961      	ldr	r1, [pc, #388]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ce:	4959      	ldr	r1, [pc, #356]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e2:	4b54      	ldr	r3, [pc, #336]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f0:	4950      	ldr	r1, [pc, #320]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002304:	4b4b      	ldr	r3, [pc, #300]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800230a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002312:	4948      	ldr	r1, [pc, #288]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002326:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	493f      	ldr	r1, [pc, #252]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d028      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002348:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002356:	4937      	ldr	r1, [pc, #220]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002366:	d106      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002368:	4b32      	ldr	r3, [pc, #200]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002372:	60d3      	str	r3, [r2, #12]
 8002374:	e011      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800237a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800237e:	d10c      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	2101      	movs	r1, #1
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f8c8 	bl	800251c <RCCEx_PLLSAI1_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023a6:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	491f      	ldr	r1, [pc, #124]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c4:	d106      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d0:	60d3      	str	r3, [r2, #12]
 80023d2:	e011      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 f899 	bl	800251c <RCCEx_PLLSAI1_Config>
 80023ea:	4603      	mov	r3, r0
 80023ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ee:	7cfb      	ldrb	r3, [r7, #19]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02b      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d109      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a02      	ldr	r2, [pc, #8]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	e014      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002440:	d10c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f867 	bl	800251c <RCCEx_PLLSAI1_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d02f      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002476:	4928      	ldr	r1, [pc, #160]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002486:	d10d      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2102      	movs	r1, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f844 	bl	800251c <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
 80024a2:	e011      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3320      	adds	r3, #32
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f925 	bl	8002704 <RCCEx_PLLSAI2_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024e2:	490d      	ldr	r1, [pc, #52]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800250e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800252a:	4b75      	ldr	r3, [pc, #468]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d018      	beq.n	8002568 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002536:	4b72      	ldr	r3, [pc, #456]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d10d      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
       ||
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800254e:	4b6c      	ldr	r3, [pc, #432]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
       ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d047      	beq.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d018      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x86>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d825      	bhi.n	80025c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002574:	2b01      	cmp	r3, #1
 8002576:	d002      	beq.n	800257e <RCCEx_PLLSAI1_Config+0x62>
 8002578:	2b02      	cmp	r3, #2
 800257a:	d009      	beq.n	8002590 <RCCEx_PLLSAI1_Config+0x74>
 800257c:	e020      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800257e:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11d      	bne.n	80025c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258e:	e01a      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002590:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d116      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e013      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025a2:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ae:	4b54      	ldr	r3, [pc, #336]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025be:	e006      	b.n	80025ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e004      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c6:	bf00      	nop
 80025c8:	e002      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ca:	bf00      	nop
 80025cc:	e000      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	430b      	orrs	r3, r1
 80025ec:	4944      	ldr	r1, [pc, #272]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d17d      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fd82 	bl	800110c <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800260a:	e009      	b.n	8002620 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800260c:	f7fe fd7e 	bl	800110c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d902      	bls.n	8002620 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	73fb      	strb	r3, [r7, #15]
        break;
 800261e:	e005      	b.n	800262c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002620:	4b37      	ldr	r3, [pc, #220]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ef      	bne.n	800260c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d160      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d111      	bne.n	800265c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002638:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	0912      	lsrs	r2, r2, #4
 8002650:	0452      	lsls	r2, r2, #17
 8002652:	430a      	orrs	r2, r1
 8002654:	492a      	ldr	r1, [pc, #168]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	610b      	str	r3, [r1, #16]
 800265a:	e027      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d112      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800266a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	0211      	lsls	r1, r2, #8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6912      	ldr	r2, [r2, #16]
 8002678:	0852      	lsrs	r2, r2, #1
 800267a:	3a01      	subs	r2, #1
 800267c:	0552      	lsls	r2, r2, #21
 800267e:	430a      	orrs	r2, r1
 8002680:	491f      	ldr	r1, [pc, #124]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
 8002686:	e011      	b.n	80026ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002688:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002690:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6892      	ldr	r2, [r2, #8]
 8002698:	0211      	lsls	r1, r2, #8
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6952      	ldr	r2, [r2, #20]
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0652      	lsls	r2, r2, #25
 80026a4:	430a      	orrs	r2, r1
 80026a6:	4916      	ldr	r1, [pc, #88]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a13      	ldr	r2, [pc, #76]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fd28 	bl	800110c <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026be:	e009      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c0:	f7fe fd24 	bl	800110c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	73fb      	strb	r3, [r7, #15]
          break;
 80026d2:	e005      	b.n	80026e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4904      	ldr	r1, [pc, #16]	@ (8002700 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002712:	4b6a      	ldr	r3, [pc, #424]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d018      	beq.n	8002750 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800271e:	4b67      	ldr	r3, [pc, #412]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
       ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002736:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
       ||
 8002746:	429a      	cmp	r2, r3
 8002748:	d047      	beq.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e044      	b.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d018      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x86>
 8002758:	2b03      	cmp	r3, #3
 800275a:	d825      	bhi.n	80027a8 <RCCEx_PLLSAI2_Config+0xa4>
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <RCCEx_PLLSAI2_Config+0x62>
 8002760:	2b02      	cmp	r3, #2
 8002762:	d009      	beq.n	8002778 <RCCEx_PLLSAI2_Config+0x74>
 8002764:	e020      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002766:	4b55      	ldr	r3, [pc, #340]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11d      	bne.n	80027ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002776:	e01a      	b.n	80027ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002778:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002788:	e013      	b.n	80027b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800278a:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002796:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027a6:	e006      	b.n	80027b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e004      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ae:	bf00      	nop
 80027b0:	e002      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027be:	4b3f      	ldr	r3, [pc, #252]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	430b      	orrs	r3, r1
 80027d4:	4939      	ldr	r1, [pc, #228]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d167      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a35      	ldr	r2, [pc, #212]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fc8e 	bl	800110c <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027f2:	e009      	b.n	8002808 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027f4:	f7fe fc8a 	bl	800110c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d902      	bls.n	8002808 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	73fb      	strb	r3, [r7, #15]
        break;
 8002806:	e005      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002808:	4b2c      	ldr	r3, [pc, #176]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ef      	bne.n	80027f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d14a      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	0211      	lsls	r1, r2, #8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	0912      	lsrs	r2, r2, #4
 8002838:	0452      	lsls	r2, r2, #17
 800283a:	430a      	orrs	r2, r1
 800283c:	491f      	ldr	r1, [pc, #124]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	614b      	str	r3, [r1, #20]
 8002842:	e011      	b.n	8002868 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800284c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6892      	ldr	r2, [r2, #8]
 8002854:	0211      	lsls	r1, r2, #8
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6912      	ldr	r2, [r2, #16]
 800285a:	0852      	lsrs	r2, r2, #1
 800285c:	3a01      	subs	r2, #1
 800285e:	0652      	lsls	r2, r2, #25
 8002860:	430a      	orrs	r2, r1
 8002862:	4916      	ldr	r1, [pc, #88]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002868:	4b14      	ldr	r3, [pc, #80]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a13      	ldr	r2, [pc, #76]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fc4a 	bl	800110c <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800287a:	e009      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800287c:	f7fe fc46 	bl	800110c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	73fb      	strb	r3, [r7, #15]
          break;
 800288e:	e005      	b.n	800289c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002890:	4b0a      	ldr	r3, [pc, #40]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ef      	beq.n	800287c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4904      	ldr	r1, [pc, #16]	@ (80028bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e049      	b.n	8002966 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fa0a 	bl	8000cfc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0204 	orr.w	r2, r2, #4
 80028fc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002908:	2b40      	cmp	r3, #64	@ 0x40
 800290a:	d104      	bne.n	8002916 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e027      	b.n	8002966 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002916:	f7fe fbf9 	bl	800110c <HAL_GetTick>
 800291a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800291c:	e015      	b.n	800294a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800291e:	f7fe fbf5 	bl	800110c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d90e      	bls.n	800294a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d007      	beq.n	800294a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e00d      	b.n	8002966 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d1e2      	bne.n	800291e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <siprintf>:
 8002970:	b40e      	push	{r1, r2, r3}
 8002972:	b500      	push	{lr}
 8002974:	b09c      	sub	sp, #112	@ 0x70
 8002976:	ab1d      	add	r3, sp, #116	@ 0x74
 8002978:	9002      	str	r0, [sp, #8]
 800297a:	9006      	str	r0, [sp, #24]
 800297c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002980:	4809      	ldr	r0, [pc, #36]	@ (80029a8 <siprintf+0x38>)
 8002982:	9107      	str	r1, [sp, #28]
 8002984:	9104      	str	r1, [sp, #16]
 8002986:	4909      	ldr	r1, [pc, #36]	@ (80029ac <siprintf+0x3c>)
 8002988:	f853 2b04 	ldr.w	r2, [r3], #4
 800298c:	9105      	str	r1, [sp, #20]
 800298e:	6800      	ldr	r0, [r0, #0]
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	a902      	add	r1, sp, #8
 8002994:	f000 f994 	bl	8002cc0 <_svfiprintf_r>
 8002998:	9b02      	ldr	r3, [sp, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	b01c      	add	sp, #112	@ 0x70
 80029a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a4:	b003      	add	sp, #12
 80029a6:	4770      	bx	lr
 80029a8:	20000010 	.word	0x20000010
 80029ac:	ffff0208 	.word	0xffff0208

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <__errno>:
 80029c0:	4b01      	ldr	r3, [pc, #4]	@ (80029c8 <__errno+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000010 	.word	0x20000010

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002a04 <__libc_init_array+0x38>)
 80029d0:	4c0d      	ldr	r4, [pc, #52]	@ (8002a08 <__libc_init_array+0x3c>)
 80029d2:	1b64      	subs	r4, r4, r5
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	2600      	movs	r6, #0
 80029d8:	42a6      	cmp	r6, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	4d0b      	ldr	r5, [pc, #44]	@ (8002a0c <__libc_init_array+0x40>)
 80029de:	4c0c      	ldr	r4, [pc, #48]	@ (8002a10 <__libc_init_array+0x44>)
 80029e0:	f000 fc66 	bl	80032b0 <_init>
 80029e4:	1b64      	subs	r4, r4, r5
 80029e6:	10a4      	asrs	r4, r4, #2
 80029e8:	2600      	movs	r6, #0
 80029ea:	42a6      	cmp	r6, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f4:	4798      	blx	r3
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fe:	4798      	blx	r3
 8002a00:	3601      	adds	r6, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	080033cc 	.word	0x080033cc
 8002a08:	080033cc 	.word	0x080033cc
 8002a0c:	080033cc 	.word	0x080033cc
 8002a10:	080033d0 	.word	0x080033d0

08002a14 <__retarget_lock_acquire_recursive>:
 8002a14:	4770      	bx	lr

08002a16 <__retarget_lock_release_recursive>:
 8002a16:	4770      	bx	lr

08002a18 <_free_r>:
 8002a18:	b538      	push	{r3, r4, r5, lr}
 8002a1a:	4605      	mov	r5, r0
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d041      	beq.n	8002aa4 <_free_r+0x8c>
 8002a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a24:	1f0c      	subs	r4, r1, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	bfb8      	it	lt
 8002a2a:	18e4      	addlt	r4, r4, r3
 8002a2c:	f000 f8e0 	bl	8002bf0 <__malloc_lock>
 8002a30:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa8 <_free_r+0x90>)
 8002a32:	6813      	ldr	r3, [r2, #0]
 8002a34:	b933      	cbnz	r3, 8002a44 <_free_r+0x2c>
 8002a36:	6063      	str	r3, [r4, #4]
 8002a38:	6014      	str	r4, [r2, #0]
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a40:	f000 b8dc 	b.w	8002bfc <__malloc_unlock>
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	d908      	bls.n	8002a5a <_free_r+0x42>
 8002a48:	6820      	ldr	r0, [r4, #0]
 8002a4a:	1821      	adds	r1, r4, r0
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	bf01      	itttt	eq
 8002a50:	6819      	ldreq	r1, [r3, #0]
 8002a52:	685b      	ldreq	r3, [r3, #4]
 8002a54:	1809      	addeq	r1, r1, r0
 8002a56:	6021      	streq	r1, [r4, #0]
 8002a58:	e7ed      	b.n	8002a36 <_free_r+0x1e>
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	b10b      	cbz	r3, 8002a64 <_free_r+0x4c>
 8002a60:	42a3      	cmp	r3, r4
 8002a62:	d9fa      	bls.n	8002a5a <_free_r+0x42>
 8002a64:	6811      	ldr	r1, [r2, #0]
 8002a66:	1850      	adds	r0, r2, r1
 8002a68:	42a0      	cmp	r0, r4
 8002a6a:	d10b      	bne.n	8002a84 <_free_r+0x6c>
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	4401      	add	r1, r0
 8002a70:	1850      	adds	r0, r2, r1
 8002a72:	4283      	cmp	r3, r0
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	d1e0      	bne.n	8002a3a <_free_r+0x22>
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	6053      	str	r3, [r2, #4]
 8002a7e:	4408      	add	r0, r1
 8002a80:	6010      	str	r0, [r2, #0]
 8002a82:	e7da      	b.n	8002a3a <_free_r+0x22>
 8002a84:	d902      	bls.n	8002a8c <_free_r+0x74>
 8002a86:	230c      	movs	r3, #12
 8002a88:	602b      	str	r3, [r5, #0]
 8002a8a:	e7d6      	b.n	8002a3a <_free_r+0x22>
 8002a8c:	6820      	ldr	r0, [r4, #0]
 8002a8e:	1821      	adds	r1, r4, r0
 8002a90:	428b      	cmp	r3, r1
 8002a92:	bf04      	itt	eq
 8002a94:	6819      	ldreq	r1, [r3, #0]
 8002a96:	685b      	ldreq	r3, [r3, #4]
 8002a98:	6063      	str	r3, [r4, #4]
 8002a9a:	bf04      	itt	eq
 8002a9c:	1809      	addeq	r1, r1, r0
 8002a9e:	6021      	streq	r1, [r4, #0]
 8002aa0:	6054      	str	r4, [r2, #4]
 8002aa2:	e7ca      	b.n	8002a3a <_free_r+0x22>
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200001e4 	.word	0x200001e4

08002aac <sbrk_aligned>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0f      	ldr	r6, [pc, #60]	@ (8002aec <sbrk_aligned+0x40>)
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	6831      	ldr	r1, [r6, #0]
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	b911      	cbnz	r1, 8002abe <sbrk_aligned+0x12>
 8002ab8:	f000 fba6 	bl	8003208 <_sbrk_r>
 8002abc:	6030      	str	r0, [r6, #0]
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 fba1 	bl	8003208 <_sbrk_r>
 8002ac6:	1c43      	adds	r3, r0, #1
 8002ac8:	d103      	bne.n	8002ad2 <sbrk_aligned+0x26>
 8002aca:	f04f 34ff 	mov.w	r4, #4294967295
 8002ace:	4620      	mov	r0, r4
 8002ad0:	bd70      	pop	{r4, r5, r6, pc}
 8002ad2:	1cc4      	adds	r4, r0, #3
 8002ad4:	f024 0403 	bic.w	r4, r4, #3
 8002ad8:	42a0      	cmp	r0, r4
 8002ada:	d0f8      	beq.n	8002ace <sbrk_aligned+0x22>
 8002adc:	1a21      	subs	r1, r4, r0
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 fb92 	bl	8003208 <_sbrk_r>
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d1f2      	bne.n	8002ace <sbrk_aligned+0x22>
 8002ae8:	e7ef      	b.n	8002aca <sbrk_aligned+0x1e>
 8002aea:	bf00      	nop
 8002aec:	200001e0 	.word	0x200001e0

08002af0 <_malloc_r>:
 8002af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002af4:	1ccd      	adds	r5, r1, #3
 8002af6:	f025 0503 	bic.w	r5, r5, #3
 8002afa:	3508      	adds	r5, #8
 8002afc:	2d0c      	cmp	r5, #12
 8002afe:	bf38      	it	cc
 8002b00:	250c      	movcc	r5, #12
 8002b02:	2d00      	cmp	r5, #0
 8002b04:	4606      	mov	r6, r0
 8002b06:	db01      	blt.n	8002b0c <_malloc_r+0x1c>
 8002b08:	42a9      	cmp	r1, r5
 8002b0a:	d904      	bls.n	8002b16 <_malloc_r+0x26>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	6033      	str	r3, [r6, #0]
 8002b10:	2000      	movs	r0, #0
 8002b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bec <_malloc_r+0xfc>
 8002b1a:	f000 f869 	bl	8002bf0 <__malloc_lock>
 8002b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b22:	461c      	mov	r4, r3
 8002b24:	bb44      	cbnz	r4, 8002b78 <_malloc_r+0x88>
 8002b26:	4629      	mov	r1, r5
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f7ff ffbf 	bl	8002aac <sbrk_aligned>
 8002b2e:	1c43      	adds	r3, r0, #1
 8002b30:	4604      	mov	r4, r0
 8002b32:	d158      	bne.n	8002be6 <_malloc_r+0xf6>
 8002b34:	f8d8 4000 	ldr.w	r4, [r8]
 8002b38:	4627      	mov	r7, r4
 8002b3a:	2f00      	cmp	r7, #0
 8002b3c:	d143      	bne.n	8002bc6 <_malloc_r+0xd6>
 8002b3e:	2c00      	cmp	r4, #0
 8002b40:	d04b      	beq.n	8002bda <_malloc_r+0xea>
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	4639      	mov	r1, r7
 8002b46:	4630      	mov	r0, r6
 8002b48:	eb04 0903 	add.w	r9, r4, r3
 8002b4c:	f000 fb5c 	bl	8003208 <_sbrk_r>
 8002b50:	4581      	cmp	r9, r0
 8002b52:	d142      	bne.n	8002bda <_malloc_r+0xea>
 8002b54:	6821      	ldr	r1, [r4, #0]
 8002b56:	1a6d      	subs	r5, r5, r1
 8002b58:	4629      	mov	r1, r5
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	f7ff ffa6 	bl	8002aac <sbrk_aligned>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d03a      	beq.n	8002bda <_malloc_r+0xea>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	442b      	add	r3, r5
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	bb62      	cbnz	r2, 8002bcc <_malloc_r+0xdc>
 8002b72:	f8c8 7000 	str.w	r7, [r8]
 8002b76:	e00f      	b.n	8002b98 <_malloc_r+0xa8>
 8002b78:	6822      	ldr	r2, [r4, #0]
 8002b7a:	1b52      	subs	r2, r2, r5
 8002b7c:	d420      	bmi.n	8002bc0 <_malloc_r+0xd0>
 8002b7e:	2a0b      	cmp	r2, #11
 8002b80:	d917      	bls.n	8002bb2 <_malloc_r+0xc2>
 8002b82:	1961      	adds	r1, r4, r5
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	6025      	str	r5, [r4, #0]
 8002b88:	bf18      	it	ne
 8002b8a:	6059      	strne	r1, [r3, #4]
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	bf08      	it	eq
 8002b90:	f8c8 1000 	streq.w	r1, [r8]
 8002b94:	5162      	str	r2, [r4, r5]
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	4630      	mov	r0, r6
 8002b9a:	f000 f82f 	bl	8002bfc <__malloc_unlock>
 8002b9e:	f104 000b 	add.w	r0, r4, #11
 8002ba2:	1d23      	adds	r3, r4, #4
 8002ba4:	f020 0007 	bic.w	r0, r0, #7
 8002ba8:	1ac2      	subs	r2, r0, r3
 8002baa:	bf1c      	itt	ne
 8002bac:	1a1b      	subne	r3, r3, r0
 8002bae:	50a3      	strne	r3, [r4, r2]
 8002bb0:	e7af      	b.n	8002b12 <_malloc_r+0x22>
 8002bb2:	6862      	ldr	r2, [r4, #4]
 8002bb4:	42a3      	cmp	r3, r4
 8002bb6:	bf0c      	ite	eq
 8002bb8:	f8c8 2000 	streq.w	r2, [r8]
 8002bbc:	605a      	strne	r2, [r3, #4]
 8002bbe:	e7eb      	b.n	8002b98 <_malloc_r+0xa8>
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	6864      	ldr	r4, [r4, #4]
 8002bc4:	e7ae      	b.n	8002b24 <_malloc_r+0x34>
 8002bc6:	463c      	mov	r4, r7
 8002bc8:	687f      	ldr	r7, [r7, #4]
 8002bca:	e7b6      	b.n	8002b3a <_malloc_r+0x4a>
 8002bcc:	461a      	mov	r2, r3
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	42a3      	cmp	r3, r4
 8002bd2:	d1fb      	bne.n	8002bcc <_malloc_r+0xdc>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6053      	str	r3, [r2, #4]
 8002bd8:	e7de      	b.n	8002b98 <_malloc_r+0xa8>
 8002bda:	230c      	movs	r3, #12
 8002bdc:	6033      	str	r3, [r6, #0]
 8002bde:	4630      	mov	r0, r6
 8002be0:	f000 f80c 	bl	8002bfc <__malloc_unlock>
 8002be4:	e794      	b.n	8002b10 <_malloc_r+0x20>
 8002be6:	6005      	str	r5, [r0, #0]
 8002be8:	e7d6      	b.n	8002b98 <_malloc_r+0xa8>
 8002bea:	bf00      	nop
 8002bec:	200001e4 	.word	0x200001e4

08002bf0 <__malloc_lock>:
 8002bf0:	4801      	ldr	r0, [pc, #4]	@ (8002bf8 <__malloc_lock+0x8>)
 8002bf2:	f7ff bf0f 	b.w	8002a14 <__retarget_lock_acquire_recursive>
 8002bf6:	bf00      	nop
 8002bf8:	200001dc 	.word	0x200001dc

08002bfc <__malloc_unlock>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	@ (8002c04 <__malloc_unlock+0x8>)
 8002bfe:	f7ff bf0a 	b.w	8002a16 <__retarget_lock_release_recursive>
 8002c02:	bf00      	nop
 8002c04:	200001dc 	.word	0x200001dc

08002c08 <__ssputs_r>:
 8002c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c0c:	688e      	ldr	r6, [r1, #8]
 8002c0e:	461f      	mov	r7, r3
 8002c10:	42be      	cmp	r6, r7
 8002c12:	680b      	ldr	r3, [r1, #0]
 8002c14:	4682      	mov	sl, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	4690      	mov	r8, r2
 8002c1a:	d82d      	bhi.n	8002c78 <__ssputs_r+0x70>
 8002c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c24:	d026      	beq.n	8002c74 <__ssputs_r+0x6c>
 8002c26:	6965      	ldr	r5, [r4, #20]
 8002c28:	6909      	ldr	r1, [r1, #16]
 8002c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c2e:	eba3 0901 	sub.w	r9, r3, r1
 8002c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c36:	1c7b      	adds	r3, r7, #1
 8002c38:	444b      	add	r3, r9
 8002c3a:	106d      	asrs	r5, r5, #1
 8002c3c:	429d      	cmp	r5, r3
 8002c3e:	bf38      	it	cc
 8002c40:	461d      	movcc	r5, r3
 8002c42:	0553      	lsls	r3, r2, #21
 8002c44:	d527      	bpl.n	8002c96 <__ssputs_r+0x8e>
 8002c46:	4629      	mov	r1, r5
 8002c48:	f7ff ff52 	bl	8002af0 <_malloc_r>
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	b360      	cbz	r0, 8002caa <__ssputs_r+0xa2>
 8002c50:	6921      	ldr	r1, [r4, #16]
 8002c52:	464a      	mov	r2, r9
 8002c54:	f000 fae8 	bl	8003228 <memcpy>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	6126      	str	r6, [r4, #16]
 8002c66:	6165      	str	r5, [r4, #20]
 8002c68:	444e      	add	r6, r9
 8002c6a:	eba5 0509 	sub.w	r5, r5, r9
 8002c6e:	6026      	str	r6, [r4, #0]
 8002c70:	60a5      	str	r5, [r4, #8]
 8002c72:	463e      	mov	r6, r7
 8002c74:	42be      	cmp	r6, r7
 8002c76:	d900      	bls.n	8002c7a <__ssputs_r+0x72>
 8002c78:	463e      	mov	r6, r7
 8002c7a:	6820      	ldr	r0, [r4, #0]
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	4641      	mov	r1, r8
 8002c80:	f000 faa8 	bl	80031d4 <memmove>
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	1b9b      	subs	r3, r3, r6
 8002c88:	60a3      	str	r3, [r4, #8]
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	4433      	add	r3, r6
 8002c8e:	6023      	str	r3, [r4, #0]
 8002c90:	2000      	movs	r0, #0
 8002c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c96:	462a      	mov	r2, r5
 8002c98:	f000 fad4 	bl	8003244 <_realloc_r>
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d1e0      	bne.n	8002c64 <__ssputs_r+0x5c>
 8002ca2:	6921      	ldr	r1, [r4, #16]
 8002ca4:	4650      	mov	r0, sl
 8002ca6:	f7ff feb7 	bl	8002a18 <_free_r>
 8002caa:	230c      	movs	r3, #12
 8002cac:	f8ca 3000 	str.w	r3, [sl]
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	e7e9      	b.n	8002c92 <__ssputs_r+0x8a>
	...

08002cc0 <_svfiprintf_r>:
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	4698      	mov	r8, r3
 8002cc6:	898b      	ldrh	r3, [r1, #12]
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	b09d      	sub	sp, #116	@ 0x74
 8002ccc:	4607      	mov	r7, r0
 8002cce:	460d      	mov	r5, r1
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	d510      	bpl.n	8002cf6 <_svfiprintf_r+0x36>
 8002cd4:	690b      	ldr	r3, [r1, #16]
 8002cd6:	b973      	cbnz	r3, 8002cf6 <_svfiprintf_r+0x36>
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	f7ff ff09 	bl	8002af0 <_malloc_r>
 8002cde:	6028      	str	r0, [r5, #0]
 8002ce0:	6128      	str	r0, [r5, #16]
 8002ce2:	b930      	cbnz	r0, 8002cf2 <_svfiprintf_r+0x32>
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	b01d      	add	sp, #116	@ 0x74
 8002cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf2:	2340      	movs	r3, #64	@ 0x40
 8002cf4:	616b      	str	r3, [r5, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d04:	2330      	movs	r3, #48	@ 0x30
 8002d06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002ea4 <_svfiprintf_r+0x1e4>
 8002d0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d0e:	f04f 0901 	mov.w	r9, #1
 8002d12:	4623      	mov	r3, r4
 8002d14:	469a      	mov	sl, r3
 8002d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d1a:	b10a      	cbz	r2, 8002d20 <_svfiprintf_r+0x60>
 8002d1c:	2a25      	cmp	r2, #37	@ 0x25
 8002d1e:	d1f9      	bne.n	8002d14 <_svfiprintf_r+0x54>
 8002d20:	ebba 0b04 	subs.w	fp, sl, r4
 8002d24:	d00b      	beq.n	8002d3e <_svfiprintf_r+0x7e>
 8002d26:	465b      	mov	r3, fp
 8002d28:	4622      	mov	r2, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f7ff ff6b 	bl	8002c08 <__ssputs_r>
 8002d32:	3001      	adds	r0, #1
 8002d34:	f000 80a7 	beq.w	8002e86 <_svfiprintf_r+0x1c6>
 8002d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d3a:	445a      	add	r2, fp
 8002d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 809f 	beq.w	8002e86 <_svfiprintf_r+0x1c6>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d52:	f10a 0a01 	add.w	sl, sl, #1
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	9307      	str	r3, [sp, #28]
 8002d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d60:	4654      	mov	r4, sl
 8002d62:	2205      	movs	r2, #5
 8002d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d68:	484e      	ldr	r0, [pc, #312]	@ (8002ea4 <_svfiprintf_r+0x1e4>)
 8002d6a:	f7fd fa31 	bl	80001d0 <memchr>
 8002d6e:	9a04      	ldr	r2, [sp, #16]
 8002d70:	b9d8      	cbnz	r0, 8002daa <_svfiprintf_r+0xea>
 8002d72:	06d0      	lsls	r0, r2, #27
 8002d74:	bf44      	itt	mi
 8002d76:	2320      	movmi	r3, #32
 8002d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d7c:	0711      	lsls	r1, r2, #28
 8002d7e:	bf44      	itt	mi
 8002d80:	232b      	movmi	r3, #43	@ 0x2b
 8002d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d86:	f89a 3000 	ldrb.w	r3, [sl]
 8002d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d8c:	d015      	beq.n	8002dba <_svfiprintf_r+0xfa>
 8002d8e:	9a07      	ldr	r2, [sp, #28]
 8002d90:	4654      	mov	r4, sl
 8002d92:	2000      	movs	r0, #0
 8002d94:	f04f 0c0a 	mov.w	ip, #10
 8002d98:	4621      	mov	r1, r4
 8002d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d9e:	3b30      	subs	r3, #48	@ 0x30
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d94b      	bls.n	8002e3c <_svfiprintf_r+0x17c>
 8002da4:	b1b0      	cbz	r0, 8002dd4 <_svfiprintf_r+0x114>
 8002da6:	9207      	str	r2, [sp, #28]
 8002da8:	e014      	b.n	8002dd4 <_svfiprintf_r+0x114>
 8002daa:	eba0 0308 	sub.w	r3, r0, r8
 8002dae:	fa09 f303 	lsl.w	r3, r9, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	9304      	str	r3, [sp, #16]
 8002db6:	46a2      	mov	sl, r4
 8002db8:	e7d2      	b.n	8002d60 <_svfiprintf_r+0xa0>
 8002dba:	9b03      	ldr	r3, [sp, #12]
 8002dbc:	1d19      	adds	r1, r3, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	9103      	str	r1, [sp, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfbb      	ittet	lt
 8002dc6:	425b      	neglt	r3, r3
 8002dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8002dcc:	9307      	strge	r3, [sp, #28]
 8002dce:	9307      	strlt	r3, [sp, #28]
 8002dd0:	bfb8      	it	lt
 8002dd2:	9204      	strlt	r2, [sp, #16]
 8002dd4:	7823      	ldrb	r3, [r4, #0]
 8002dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dd8:	d10a      	bne.n	8002df0 <_svfiprintf_r+0x130>
 8002dda:	7863      	ldrb	r3, [r4, #1]
 8002ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dde:	d132      	bne.n	8002e46 <_svfiprintf_r+0x186>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	9203      	str	r2, [sp, #12]
 8002de8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002dec:	3402      	adds	r4, #2
 8002dee:	9305      	str	r3, [sp, #20]
 8002df0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002eb4 <_svfiprintf_r+0x1f4>
 8002df4:	7821      	ldrb	r1, [r4, #0]
 8002df6:	2203      	movs	r2, #3
 8002df8:	4650      	mov	r0, sl
 8002dfa:	f7fd f9e9 	bl	80001d0 <memchr>
 8002dfe:	b138      	cbz	r0, 8002e10 <_svfiprintf_r+0x150>
 8002e00:	9b04      	ldr	r3, [sp, #16]
 8002e02:	eba0 000a 	sub.w	r0, r0, sl
 8002e06:	2240      	movs	r2, #64	@ 0x40
 8002e08:	4082      	lsls	r2, r0
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	3401      	adds	r4, #1
 8002e0e:	9304      	str	r3, [sp, #16]
 8002e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e14:	4824      	ldr	r0, [pc, #144]	@ (8002ea8 <_svfiprintf_r+0x1e8>)
 8002e16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e1a:	2206      	movs	r2, #6
 8002e1c:	f7fd f9d8 	bl	80001d0 <memchr>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d036      	beq.n	8002e92 <_svfiprintf_r+0x1d2>
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <_svfiprintf_r+0x1ec>)
 8002e26:	bb1b      	cbnz	r3, 8002e70 <_svfiprintf_r+0x1b0>
 8002e28:	9b03      	ldr	r3, [sp, #12]
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	3308      	adds	r3, #8
 8002e32:	9303      	str	r3, [sp, #12]
 8002e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e36:	4433      	add	r3, r6
 8002e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e3a:	e76a      	b.n	8002d12 <_svfiprintf_r+0x52>
 8002e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e40:	460c      	mov	r4, r1
 8002e42:	2001      	movs	r0, #1
 8002e44:	e7a8      	b.n	8002d98 <_svfiprintf_r+0xd8>
 8002e46:	2300      	movs	r3, #0
 8002e48:	3401      	adds	r4, #1
 8002e4a:	9305      	str	r3, [sp, #20]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 0c0a 	mov.w	ip, #10
 8002e52:	4620      	mov	r0, r4
 8002e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e58:	3a30      	subs	r2, #48	@ 0x30
 8002e5a:	2a09      	cmp	r2, #9
 8002e5c:	d903      	bls.n	8002e66 <_svfiprintf_r+0x1a6>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0c6      	beq.n	8002df0 <_svfiprintf_r+0x130>
 8002e62:	9105      	str	r1, [sp, #20]
 8002e64:	e7c4      	b.n	8002df0 <_svfiprintf_r+0x130>
 8002e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e7f0      	b.n	8002e52 <_svfiprintf_r+0x192>
 8002e70:	ab03      	add	r3, sp, #12
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	462a      	mov	r2, r5
 8002e76:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <_svfiprintf_r+0x1f0>)
 8002e78:	a904      	add	r1, sp, #16
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	f3af 8000 	nop.w
 8002e80:	1c42      	adds	r2, r0, #1
 8002e82:	4606      	mov	r6, r0
 8002e84:	d1d6      	bne.n	8002e34 <_svfiprintf_r+0x174>
 8002e86:	89ab      	ldrh	r3, [r5, #12]
 8002e88:	065b      	lsls	r3, r3, #25
 8002e8a:	f53f af2d 	bmi.w	8002ce8 <_svfiprintf_r+0x28>
 8002e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e90:	e72c      	b.n	8002cec <_svfiprintf_r+0x2c>
 8002e92:	ab03      	add	r3, sp, #12
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	462a      	mov	r2, r5
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <_svfiprintf_r+0x1f0>)
 8002e9a:	a904      	add	r1, sp, #16
 8002e9c:	4638      	mov	r0, r7
 8002e9e:	f000 f879 	bl	8002f94 <_printf_i>
 8002ea2:	e7ed      	b.n	8002e80 <_svfiprintf_r+0x1c0>
 8002ea4:	08003390 	.word	0x08003390
 8002ea8:	0800339a 	.word	0x0800339a
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	08002c09 	.word	0x08002c09
 8002eb4:	08003396 	.word	0x08003396

08002eb8 <_printf_common>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	4616      	mov	r6, r2
 8002ebe:	4698      	mov	r8, r3
 8002ec0:	688a      	ldr	r2, [r1, #8]
 8002ec2:	690b      	ldr	r3, [r1, #16]
 8002ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bfb8      	it	lt
 8002ecc:	4613      	movlt	r3, r2
 8002ece:	6033      	str	r3, [r6, #0]
 8002ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	b10a      	cbz	r2, 8002ede <_printf_common+0x26>
 8002eda:	3301      	adds	r3, #1
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	0699      	lsls	r1, r3, #26
 8002ee2:	bf42      	ittt	mi
 8002ee4:	6833      	ldrmi	r3, [r6, #0]
 8002ee6:	3302      	addmi	r3, #2
 8002ee8:	6033      	strmi	r3, [r6, #0]
 8002eea:	6825      	ldr	r5, [r4, #0]
 8002eec:	f015 0506 	ands.w	r5, r5, #6
 8002ef0:	d106      	bne.n	8002f00 <_printf_common+0x48>
 8002ef2:	f104 0a19 	add.w	sl, r4, #25
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	6832      	ldr	r2, [r6, #0]
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	42ab      	cmp	r3, r5
 8002efe:	dc26      	bgt.n	8002f4e <_printf_common+0x96>
 8002f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	3b00      	subs	r3, #0
 8002f08:	bf18      	it	ne
 8002f0a:	2301      	movne	r3, #1
 8002f0c:	0692      	lsls	r2, r2, #26
 8002f0e:	d42b      	bmi.n	8002f68 <_printf_common+0xb0>
 8002f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f14:	4641      	mov	r1, r8
 8002f16:	4638      	mov	r0, r7
 8002f18:	47c8      	blx	r9
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d01e      	beq.n	8002f5c <_printf_common+0xa4>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	6922      	ldr	r2, [r4, #16]
 8002f22:	f003 0306 	and.w	r3, r3, #6
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	bf02      	ittt	eq
 8002f2a:	68e5      	ldreq	r5, [r4, #12]
 8002f2c:	6833      	ldreq	r3, [r6, #0]
 8002f2e:	1aed      	subeq	r5, r5, r3
 8002f30:	68a3      	ldr	r3, [r4, #8]
 8002f32:	bf0c      	ite	eq
 8002f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f38:	2500      	movne	r5, #0
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	bfc4      	itt	gt
 8002f3e:	1a9b      	subgt	r3, r3, r2
 8002f40:	18ed      	addgt	r5, r5, r3
 8002f42:	2600      	movs	r6, #0
 8002f44:	341a      	adds	r4, #26
 8002f46:	42b5      	cmp	r5, r6
 8002f48:	d11a      	bne.n	8002f80 <_printf_common+0xc8>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e008      	b.n	8002f60 <_printf_common+0xa8>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4652      	mov	r2, sl
 8002f52:	4641      	mov	r1, r8
 8002f54:	4638      	mov	r0, r7
 8002f56:	47c8      	blx	r9
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d103      	bne.n	8002f64 <_printf_common+0xac>
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f64:	3501      	adds	r5, #1
 8002f66:	e7c6      	b.n	8002ef6 <_printf_common+0x3e>
 8002f68:	18e1      	adds	r1, r4, r3
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	2030      	movs	r0, #48	@ 0x30
 8002f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f72:	4422      	add	r2, r4
 8002f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	e7c7      	b.n	8002f10 <_printf_common+0x58>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4622      	mov	r2, r4
 8002f84:	4641      	mov	r1, r8
 8002f86:	4638      	mov	r0, r7
 8002f88:	47c8      	blx	r9
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d0e6      	beq.n	8002f5c <_printf_common+0xa4>
 8002f8e:	3601      	adds	r6, #1
 8002f90:	e7d9      	b.n	8002f46 <_printf_common+0x8e>
	...

08002f94 <_printf_i>:
 8002f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	7e0f      	ldrb	r7, [r1, #24]
 8002f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f9c:	2f78      	cmp	r7, #120	@ 0x78
 8002f9e:	4691      	mov	r9, r2
 8002fa0:	4680      	mov	r8, r0
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	469a      	mov	sl, r3
 8002fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002faa:	d807      	bhi.n	8002fbc <_printf_i+0x28>
 8002fac:	2f62      	cmp	r7, #98	@ 0x62
 8002fae:	d80a      	bhi.n	8002fc6 <_printf_i+0x32>
 8002fb0:	2f00      	cmp	r7, #0
 8002fb2:	f000 80d2 	beq.w	800315a <_printf_i+0x1c6>
 8002fb6:	2f58      	cmp	r7, #88	@ 0x58
 8002fb8:	f000 80b9 	beq.w	800312e <_printf_i+0x19a>
 8002fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fc4:	e03a      	b.n	800303c <_printf_i+0xa8>
 8002fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fca:	2b15      	cmp	r3, #21
 8002fcc:	d8f6      	bhi.n	8002fbc <_printf_i+0x28>
 8002fce:	a101      	add	r1, pc, #4	@ (adr r1, 8002fd4 <_printf_i+0x40>)
 8002fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fd4:	0800302d 	.word	0x0800302d
 8002fd8:	08003041 	.word	0x08003041
 8002fdc:	08002fbd 	.word	0x08002fbd
 8002fe0:	08002fbd 	.word	0x08002fbd
 8002fe4:	08002fbd 	.word	0x08002fbd
 8002fe8:	08002fbd 	.word	0x08002fbd
 8002fec:	08003041 	.word	0x08003041
 8002ff0:	08002fbd 	.word	0x08002fbd
 8002ff4:	08002fbd 	.word	0x08002fbd
 8002ff8:	08002fbd 	.word	0x08002fbd
 8002ffc:	08002fbd 	.word	0x08002fbd
 8003000:	08003141 	.word	0x08003141
 8003004:	0800306b 	.word	0x0800306b
 8003008:	080030fb 	.word	0x080030fb
 800300c:	08002fbd 	.word	0x08002fbd
 8003010:	08002fbd 	.word	0x08002fbd
 8003014:	08003163 	.word	0x08003163
 8003018:	08002fbd 	.word	0x08002fbd
 800301c:	0800306b 	.word	0x0800306b
 8003020:	08002fbd 	.word	0x08002fbd
 8003024:	08002fbd 	.word	0x08002fbd
 8003028:	08003103 	.word	0x08003103
 800302c:	6833      	ldr	r3, [r6, #0]
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6032      	str	r2, [r6, #0]
 8003034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800303c:	2301      	movs	r3, #1
 800303e:	e09d      	b.n	800317c <_printf_i+0x1e8>
 8003040:	6833      	ldr	r3, [r6, #0]
 8003042:	6820      	ldr	r0, [r4, #0]
 8003044:	1d19      	adds	r1, r3, #4
 8003046:	6031      	str	r1, [r6, #0]
 8003048:	0606      	lsls	r6, r0, #24
 800304a:	d501      	bpl.n	8003050 <_printf_i+0xbc>
 800304c:	681d      	ldr	r5, [r3, #0]
 800304e:	e003      	b.n	8003058 <_printf_i+0xc4>
 8003050:	0645      	lsls	r5, r0, #25
 8003052:	d5fb      	bpl.n	800304c <_printf_i+0xb8>
 8003054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003058:	2d00      	cmp	r5, #0
 800305a:	da03      	bge.n	8003064 <_printf_i+0xd0>
 800305c:	232d      	movs	r3, #45	@ 0x2d
 800305e:	426d      	negs	r5, r5
 8003060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003064:	4859      	ldr	r0, [pc, #356]	@ (80031cc <_printf_i+0x238>)
 8003066:	230a      	movs	r3, #10
 8003068:	e011      	b.n	800308e <_printf_i+0xfa>
 800306a:	6821      	ldr	r1, [r4, #0]
 800306c:	6833      	ldr	r3, [r6, #0]
 800306e:	0608      	lsls	r0, r1, #24
 8003070:	f853 5b04 	ldr.w	r5, [r3], #4
 8003074:	d402      	bmi.n	800307c <_printf_i+0xe8>
 8003076:	0649      	lsls	r1, r1, #25
 8003078:	bf48      	it	mi
 800307a:	b2ad      	uxthmi	r5, r5
 800307c:	2f6f      	cmp	r7, #111	@ 0x6f
 800307e:	4853      	ldr	r0, [pc, #332]	@ (80031cc <_printf_i+0x238>)
 8003080:	6033      	str	r3, [r6, #0]
 8003082:	bf14      	ite	ne
 8003084:	230a      	movne	r3, #10
 8003086:	2308      	moveq	r3, #8
 8003088:	2100      	movs	r1, #0
 800308a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800308e:	6866      	ldr	r6, [r4, #4]
 8003090:	60a6      	str	r6, [r4, #8]
 8003092:	2e00      	cmp	r6, #0
 8003094:	bfa2      	ittt	ge
 8003096:	6821      	ldrge	r1, [r4, #0]
 8003098:	f021 0104 	bicge.w	r1, r1, #4
 800309c:	6021      	strge	r1, [r4, #0]
 800309e:	b90d      	cbnz	r5, 80030a4 <_printf_i+0x110>
 80030a0:	2e00      	cmp	r6, #0
 80030a2:	d04b      	beq.n	800313c <_printf_i+0x1a8>
 80030a4:	4616      	mov	r6, r2
 80030a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80030aa:	fb03 5711 	mls	r7, r3, r1, r5
 80030ae:	5dc7      	ldrb	r7, [r0, r7]
 80030b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030b4:	462f      	mov	r7, r5
 80030b6:	42bb      	cmp	r3, r7
 80030b8:	460d      	mov	r5, r1
 80030ba:	d9f4      	bls.n	80030a6 <_printf_i+0x112>
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d10b      	bne.n	80030d8 <_printf_i+0x144>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	07df      	lsls	r7, r3, #31
 80030c4:	d508      	bpl.n	80030d8 <_printf_i+0x144>
 80030c6:	6923      	ldr	r3, [r4, #16]
 80030c8:	6861      	ldr	r1, [r4, #4]
 80030ca:	4299      	cmp	r1, r3
 80030cc:	bfde      	ittt	le
 80030ce:	2330      	movle	r3, #48	@ 0x30
 80030d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030d8:	1b92      	subs	r2, r2, r6
 80030da:	6122      	str	r2, [r4, #16]
 80030dc:	f8cd a000 	str.w	sl, [sp]
 80030e0:	464b      	mov	r3, r9
 80030e2:	aa03      	add	r2, sp, #12
 80030e4:	4621      	mov	r1, r4
 80030e6:	4640      	mov	r0, r8
 80030e8:	f7ff fee6 	bl	8002eb8 <_printf_common>
 80030ec:	3001      	adds	r0, #1
 80030ee:	d14a      	bne.n	8003186 <_printf_i+0x1f2>
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	b004      	add	sp, #16
 80030f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	f043 0320 	orr.w	r3, r3, #32
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	4833      	ldr	r0, [pc, #204]	@ (80031d0 <_printf_i+0x23c>)
 8003104:	2778      	movs	r7, #120	@ 0x78
 8003106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	6831      	ldr	r1, [r6, #0]
 800310e:	061f      	lsls	r7, r3, #24
 8003110:	f851 5b04 	ldr.w	r5, [r1], #4
 8003114:	d402      	bmi.n	800311c <_printf_i+0x188>
 8003116:	065f      	lsls	r7, r3, #25
 8003118:	bf48      	it	mi
 800311a:	b2ad      	uxthmi	r5, r5
 800311c:	6031      	str	r1, [r6, #0]
 800311e:	07d9      	lsls	r1, r3, #31
 8003120:	bf44      	itt	mi
 8003122:	f043 0320 	orrmi.w	r3, r3, #32
 8003126:	6023      	strmi	r3, [r4, #0]
 8003128:	b11d      	cbz	r5, 8003132 <_printf_i+0x19e>
 800312a:	2310      	movs	r3, #16
 800312c:	e7ac      	b.n	8003088 <_printf_i+0xf4>
 800312e:	4827      	ldr	r0, [pc, #156]	@ (80031cc <_printf_i+0x238>)
 8003130:	e7e9      	b.n	8003106 <_printf_i+0x172>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	f023 0320 	bic.w	r3, r3, #32
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	e7f6      	b.n	800312a <_printf_i+0x196>
 800313c:	4616      	mov	r6, r2
 800313e:	e7bd      	b.n	80030bc <_printf_i+0x128>
 8003140:	6833      	ldr	r3, [r6, #0]
 8003142:	6825      	ldr	r5, [r4, #0]
 8003144:	6961      	ldr	r1, [r4, #20]
 8003146:	1d18      	adds	r0, r3, #4
 8003148:	6030      	str	r0, [r6, #0]
 800314a:	062e      	lsls	r6, r5, #24
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	d501      	bpl.n	8003154 <_printf_i+0x1c0>
 8003150:	6019      	str	r1, [r3, #0]
 8003152:	e002      	b.n	800315a <_printf_i+0x1c6>
 8003154:	0668      	lsls	r0, r5, #25
 8003156:	d5fb      	bpl.n	8003150 <_printf_i+0x1bc>
 8003158:	8019      	strh	r1, [r3, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	6123      	str	r3, [r4, #16]
 800315e:	4616      	mov	r6, r2
 8003160:	e7bc      	b.n	80030dc <_printf_i+0x148>
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	1d1a      	adds	r2, r3, #4
 8003166:	6032      	str	r2, [r6, #0]
 8003168:	681e      	ldr	r6, [r3, #0]
 800316a:	6862      	ldr	r2, [r4, #4]
 800316c:	2100      	movs	r1, #0
 800316e:	4630      	mov	r0, r6
 8003170:	f7fd f82e 	bl	80001d0 <memchr>
 8003174:	b108      	cbz	r0, 800317a <_printf_i+0x1e6>
 8003176:	1b80      	subs	r0, r0, r6
 8003178:	6060      	str	r0, [r4, #4]
 800317a:	6863      	ldr	r3, [r4, #4]
 800317c:	6123      	str	r3, [r4, #16]
 800317e:	2300      	movs	r3, #0
 8003180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003184:	e7aa      	b.n	80030dc <_printf_i+0x148>
 8003186:	6923      	ldr	r3, [r4, #16]
 8003188:	4632      	mov	r2, r6
 800318a:	4649      	mov	r1, r9
 800318c:	4640      	mov	r0, r8
 800318e:	47d0      	blx	sl
 8003190:	3001      	adds	r0, #1
 8003192:	d0ad      	beq.n	80030f0 <_printf_i+0x15c>
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	079b      	lsls	r3, r3, #30
 8003198:	d413      	bmi.n	80031c2 <_printf_i+0x22e>
 800319a:	68e0      	ldr	r0, [r4, #12]
 800319c:	9b03      	ldr	r3, [sp, #12]
 800319e:	4298      	cmp	r0, r3
 80031a0:	bfb8      	it	lt
 80031a2:	4618      	movlt	r0, r3
 80031a4:	e7a6      	b.n	80030f4 <_printf_i+0x160>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	47d0      	blx	sl
 80031b0:	3001      	adds	r0, #1
 80031b2:	d09d      	beq.n	80030f0 <_printf_i+0x15c>
 80031b4:	3501      	adds	r5, #1
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	9903      	ldr	r1, [sp, #12]
 80031ba:	1a5b      	subs	r3, r3, r1
 80031bc:	42ab      	cmp	r3, r5
 80031be:	dcf2      	bgt.n	80031a6 <_printf_i+0x212>
 80031c0:	e7eb      	b.n	800319a <_printf_i+0x206>
 80031c2:	2500      	movs	r5, #0
 80031c4:	f104 0619 	add.w	r6, r4, #25
 80031c8:	e7f5      	b.n	80031b6 <_printf_i+0x222>
 80031ca:	bf00      	nop
 80031cc:	080033a1 	.word	0x080033a1
 80031d0:	080033b2 	.word	0x080033b2

080031d4 <memmove>:
 80031d4:	4288      	cmp	r0, r1
 80031d6:	b510      	push	{r4, lr}
 80031d8:	eb01 0402 	add.w	r4, r1, r2
 80031dc:	d902      	bls.n	80031e4 <memmove+0x10>
 80031de:	4284      	cmp	r4, r0
 80031e0:	4623      	mov	r3, r4
 80031e2:	d807      	bhi.n	80031f4 <memmove+0x20>
 80031e4:	1e43      	subs	r3, r0, #1
 80031e6:	42a1      	cmp	r1, r4
 80031e8:	d008      	beq.n	80031fc <memmove+0x28>
 80031ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031f2:	e7f8      	b.n	80031e6 <memmove+0x12>
 80031f4:	4402      	add	r2, r0
 80031f6:	4601      	mov	r1, r0
 80031f8:	428a      	cmp	r2, r1
 80031fa:	d100      	bne.n	80031fe <memmove+0x2a>
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003206:	e7f7      	b.n	80031f8 <memmove+0x24>

08003208 <_sbrk_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4d06      	ldr	r5, [pc, #24]	@ (8003224 <_sbrk_r+0x1c>)
 800320c:	2300      	movs	r3, #0
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	602b      	str	r3, [r5, #0]
 8003214:	f7fd fde6 	bl	8000de4 <_sbrk>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d102      	bne.n	8003222 <_sbrk_r+0x1a>
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	b103      	cbz	r3, 8003222 <_sbrk_r+0x1a>
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	200001d8 	.word	0x200001d8

08003228 <memcpy>:
 8003228:	440a      	add	r2, r1
 800322a:	4291      	cmp	r1, r2
 800322c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003230:	d100      	bne.n	8003234 <memcpy+0xc>
 8003232:	4770      	bx	lr
 8003234:	b510      	push	{r4, lr}
 8003236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800323a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800323e:	4291      	cmp	r1, r2
 8003240:	d1f9      	bne.n	8003236 <memcpy+0xe>
 8003242:	bd10      	pop	{r4, pc}

08003244 <_realloc_r>:
 8003244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003248:	4680      	mov	r8, r0
 800324a:	4615      	mov	r5, r2
 800324c:	460c      	mov	r4, r1
 800324e:	b921      	cbnz	r1, 800325a <_realloc_r+0x16>
 8003250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003254:	4611      	mov	r1, r2
 8003256:	f7ff bc4b 	b.w	8002af0 <_malloc_r>
 800325a:	b92a      	cbnz	r2, 8003268 <_realloc_r+0x24>
 800325c:	f7ff fbdc 	bl	8002a18 <_free_r>
 8003260:	2400      	movs	r4, #0
 8003262:	4620      	mov	r0, r4
 8003264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003268:	f000 f81a 	bl	80032a0 <_malloc_usable_size_r>
 800326c:	4285      	cmp	r5, r0
 800326e:	4606      	mov	r6, r0
 8003270:	d802      	bhi.n	8003278 <_realloc_r+0x34>
 8003272:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003276:	d8f4      	bhi.n	8003262 <_realloc_r+0x1e>
 8003278:	4629      	mov	r1, r5
 800327a:	4640      	mov	r0, r8
 800327c:	f7ff fc38 	bl	8002af0 <_malloc_r>
 8003280:	4607      	mov	r7, r0
 8003282:	2800      	cmp	r0, #0
 8003284:	d0ec      	beq.n	8003260 <_realloc_r+0x1c>
 8003286:	42b5      	cmp	r5, r6
 8003288:	462a      	mov	r2, r5
 800328a:	4621      	mov	r1, r4
 800328c:	bf28      	it	cs
 800328e:	4632      	movcs	r2, r6
 8003290:	f7ff ffca 	bl	8003228 <memcpy>
 8003294:	4621      	mov	r1, r4
 8003296:	4640      	mov	r0, r8
 8003298:	f7ff fbbe 	bl	8002a18 <_free_r>
 800329c:	463c      	mov	r4, r7
 800329e:	e7e0      	b.n	8003262 <_realloc_r+0x1e>

080032a0 <_malloc_usable_size_r>:
 80032a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a4:	1f18      	subs	r0, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfbc      	itt	lt
 80032aa:	580b      	ldrlt	r3, [r1, r0]
 80032ac:	18c0      	addlt	r0, r0, r3
 80032ae:	4770      	bx	lr

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
